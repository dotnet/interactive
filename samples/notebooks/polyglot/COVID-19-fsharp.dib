#!markdown

[this doc on github](https://github.com/dotnet/interactive/tree/master/samples/notebooks/polyglot)

# Visualizing the Johns Hopkins COVID-19 time series data

**This is a work in progress.** It doesn't work yet in [Binder](https://mybinder.org/v2/gh/dotnet/interactive/master?urlpath=lab) because it relies on HTTP communication between the kernel and the Jupyter frontend.

Also, due to travel restrictions, you should run this at home on isolated compute.

*And don't forget to wash your hands.*

Since Johns Hopkins has put COVID-19 time series data on [GitHub](https://github.com/CSSEGISandData/COVID-19), let's take a look at it. We can download it using PowerShell:

#!fsharp

#r "nuget: Fsharp.Data"

#!fsharp

open FSharp.Data
    
let CsvUrls = [
    "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
    "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
    "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
]

let AllParsed =
    CsvUrls
    |> Seq.map CsvFile.AsyncLoad
    |> Async.Parallel
    |> Async.RunSynchronously

#!markdown

Let's check that csv files headers are the same.

#!fsharp

assert 
    AllParsed
    |> Seq.map (fun t -> t.Headers |> Option.get)
    |> Seq.pairwise
    |> Seq.forall (fun (a,b) -> a = b)

#!markdown

Now, let's simply load the data into an anonymous record.

#!fsharp

let offset = 4
let displayedValue = display("Processing data");

let series = 
    let all  = AllParsed |> Array.map ((fun x -> x.Rows) >> List.ofSeq)
    let makeDay (date: string) = 
        displayedValue.Update($"processing {date}")
        let makeDcr i =
            {|
                latitude = []
                longitude = []
                data = []
            |}
            |> List.foldBack (fun (x :CsvRow) S -> match (x[date].AsInteger()) with
                                                | 0  -> S
                                                | y  -> {| S with latitude = x["Lat"]::S.latitude
                                                                  longitude = x["Long"]::S.longitude
                                                                  data = y::S.data |}) all[i]
        

        {|  
            date = date
            deathsSeries = makeDcr 0
            confirmedSeries = makeDcr 1
            recoveredSeries = makeDcr 2
        |}

    AllParsed[0].Headers
    |> Option.get
    |> Array.skip offset
    |> Array.map makeDay

displayedValue.Update("Ready.")

#!markdown

Because we've stored our data in top-level variables (`deathsSeries`, `confirmedSeries`, `recoveredSeries`, etc.) in the F# kernel, they're accessible from JavaScript latter with [variable sharing](https://github.com/dotnet/interactive/blob/main/docs/variable-sharing.md). The data is obtained as JSON and we can plot it using the library of our choice, pulled in using [RequireJS](https://requirejs.org/). 

We'll use [Plotly](https://plot.ly/).

#!javascript

plot = function (plotTarget,series) {
    let loadPlotly = interactive.configureRequire({
        context: "COVID",
        paths: {
            plotly: "https://cdn.plot.ly/plotly-latest.min"
        }
    });
    
    loadPlotly(["plotly"], (Plotly) => {
        if (typeof (updateInterval) !== 'undefined') {
            clearInterval(updateInterval);
        }

        let index = 0;

        if (typeof (document.getElementById(plotTarget)) !== 'undefined') {
            var { deathsSeries, confirmedSeries, recoveredSeries,  date } = series[index];
            var recovered = {
                name: "Recovered",
                type: "scattergeo",
                mode: "markers",
                geo: "geo",
                lat: recoveredSeries.latitude,
                lon: recoveredSeries.longitude,
                text: recoveredSeries.data,
                marker: {
                    symbol: "square",
                    color: "Green"
                }
            };

            var deaths = {
                name: "Fatal",
                type: "scattergeo",
                geo: "geo2",
                mode: "markers",
                lat: deathsSeries.latitude,
                lon: deathsSeries.longitude,
                text: deathsSeries.data,
                marker: {
                    symbol: "circle",
                    color: "Black"
                }
            };

            var confirmed = {
                name: "Total confirmed",
                type: "scattergeo",
                geo: "geo3",
                mode: "markers",
                lat: confirmedSeries.latitude,
                lon: confirmedSeries.longitude,
                text: confirmedSeries.data,
                marker: {
                    symbol: "diamond",
                    color: "#DC7633"
                }
            };
            

            var traces = [recovered, deaths, confirmed];

            var layout = {
                title: "COVID-19 cases (" + date + ")",
                grid: { columns: 3, rows: 1 },
                geo: {
                    scope: "world",
                    showland: true,
                    showcountries: true,
                    bgcolor: "rgb(90,90,90)",
                    landcolor: "rgb(250,250,250)",
                    domain: {
                        row: 0,
                        column: 0
                    }
                },
                geo2: {
                    scope: "world",
                    showland: true,
                    showcountries: true,
                    bgcolor: "rgb(90,90,90)",
                    landcolor: "rgb(250,250,250)",
                    domain: {
                        row: 0,
                        column: 1
                    }
                },
                geo3: {
                    scope: "world",
                    showland: true,
                    showcountries: true,
                    bgcolor: "rgb(90,90,90)",
                    landcolor: "rgb(250,250,250)",
                    domain: {
                        row: 0,
                        column: 2
                    }
                }
            };
            if (typeof (document.getElementById(plotTarget)) !== 'undefined') {
                Plotly.newPlot(plotTarget, traces, layout);
            }
            let updateCovidPlot = () => {
                if (typeof (document.getElementById(plotTarget)) !== 'undefined') {
                    index++;
                    if (index === series.length) {
                        clearInterval(updateInterval);
                        return;
                    }
                    var { deathsSeries, confirmedSeries, recoveredSeries, currentSeries, date } = series[index];
                    Plotly.animate("plotlyChartCovid", {
                        data: [
                            {
                                lat: recoveredSeries.latitude,
                                lon: recoveredSeries.longitude,
                                text: recoveredSeries.data
                            },
                            {
                                lat: deathsSeries.latitude,
                                lon: deathsSeries.longitude,
                                text: deathsSeries.data
                            },
                            {
                                lat: confirmedSeries.latitude,
                                lon: confirmedSeries.longitude,
                                text: confirmedSeries.data
                            }],
                        layout: {
                            title: "COVID-19 " + date
                        }
                    });
                }
            }
            updateInterval = setInterval(() => updateCovidPlot(), 250);
        }
    });
};

#!markdown

Notice the `setInterval` call near the end of the previous cell. This rechecks the data in the kernel and updates the plot.

Back on the kernel, we can now update the data so that the kernel can see it.

Yes, this is a contrived example, and we're planning to support true streaming data, but it's a start.

#!html

<div id="plotlyChartCovid"></div>

#!js
#!share --from fsharp series
plot("plotlyChartCovid",series);
