#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"pwsh"},{"name":"value"}]}}

#!markdown

# Overview

This is an example of using [DataFrame](https://github.com/nightroman/DataFrame) module in .NET Ineractive notebooks using PowerShell

#!markdown

First we need to load the correct version of the `Microsoft.Data.Analysis` package, along with `Microsoft.DotNet.Interactive.ExtensionLab` which performs formatting

#!csharp

#r "nuget: Microsoft.Data.Analysis, 0.22.2"
#r "nuget: Microsoft.DotNet.Interactive.ExtensionLab, 1.0.0-beta.24164.1"

#!markdown

Now we install the module

#!pwsh

Install-Module DataFrame -Scope CurrentUser -Force -AllowClobber

#!markdown

Import it

#!pwsh

Import-Module DataFrame

#!markdown

Now generate a DataFrame objects

#!pwsh

$df = New-DataFrame @(
    New-StringColumn Name
    New-Int64Column WS
    New-Int32Column Handles
    New-BooleanColumn Responding
)

foreach($_ in Get-Process) {
    Add-DataFrameRow $df @(
        $_.Name
        $_.WS
        $_.Handles
        $_.Responding
    )
}

#!markdown

And display it

#!pwsh

$df

#!markdown

We can also use Parquet files as follows

#!pwsh

Export-DataFrame $df -ParquetPath z.process.parquet

#!pwsh

$df2 = Import-DataFrame -ParquetPath 'z.process.parquet'
$df2
