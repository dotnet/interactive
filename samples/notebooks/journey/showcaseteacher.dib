#!csharp

#r "nuget: Microsoft.DotNet.Interactive.Journey, *-*"
#r "nuget: Image-Sharp.InteractiveExtension, *-*"

#!csharp

using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!csharp

class BinaryTree
{
    public int Value;
    public BinaryTree Left;
    public BinaryTree Right;

    public BinaryTree(int value, BinaryTree left, BinaryTree right)
    {
        Value = value;
        Left = left;
        Right = right;
    }
}

Lesson.ResetChallenge();

#!markdown

# [Challenge] trav

#!csharp

Func<BinaryTree, IEnumerable<int>> Traverse = root => Enumerable.Empty<int>();

#!csharp

Lesson.CurrentChallenge.AddRule("Checking traversal", context =>
{
    var sampleLeft = new BinaryTree(2, new BinaryTree(3, null, null), new BinaryTree(4, null, null));
    var sampleRight = new BinaryTree(5, null, new BinaryTree(6, null, null));
    var sample = new BinaryTree(1, sampleLeft, sampleRight);
    var correctans = new int[] { 1, 2, 3, 4, 5, 6 };
    var ans = Traverse(sample);
    if (ans.All(correctans.Contains) && correctans.Count() == ans.Count())
    {
        context.Pass("Traversal correct");
    }
    else
    {
        context.Fail("Traversal incorrect");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    // var history = context.SubmissionHistory ....
    if (total == numPassed)
    {
        context.SetMessage("Challenge 1 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 1 not complete");
    }
});

#!markdown

## [Question]

#!markdown

# Challenge 1: Traverse a Binary Tree

#!markdown

In this challenge, you will be writing an algorithm for traversing the nodes of a binary tree. 

The type you will be working with is `BinaryTree`. It represents the root node of the binary tree rooted at that node. It has an integer property `Value` representing the node's value. It also has the properties `Left` and `Right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `Traverse`. The lambda should have type `Func<BinaryTree, IEnumerable<int>>`.

It should output the list of values for each node in the tree. The order does not matter.

#!csharp

Traverse = root =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

Traverse = root => 
{
    var ans = new List<int>();
    var q = new Queue<BinaryTree>();
    q.Enqueue(root);
    while (q.Count > 0)
    {
        var curr = q.Dequeue();
        if (curr is null)
        {
            continue;
        }
        ans.Add(curr.Value);
        q.Enqueue(curr.Left);
        q.Enqueue(curr.Right);
    }
    return ans;
};

#!csharp

#!model-answer
// this should fail

Traverse = root => 
{
    var ans = new List<int>();
    var q = new Queue<BinaryTree>();
    q.Enqueue(root);
    while (q.Count > 0)
    {
        var curr = q.Dequeue();
        if (curr is null)
        {
            continue;
        }
        ans.Add(curr.Value);
        q.Enqueue(curr.Right);
    }
    return ans;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] dfs

#!csharp

Func<BinaryTree, IEnumerable<int>> DepthFirstTraverse = root => Enumerable.Empty<int>();

#!csharp

Lesson.CurrentChallenge.AddRuleAsync("Checking depth first traversal", async context =>
{
    var sampleLeft = new BinaryTree(2, new BinaryTree(3, null, null), new BinaryTree(4, null, null));
    var sampleRight = new BinaryTree(5, null, new BinaryTree(6, null, null));
    var sample = new BinaryTree(1, sampleLeft, sampleRight);
    var correctans = new int[] { 1, 2, 3, 4, 5, 6 };
    var bfsans = new int[] { 1, 2, 5, 3, 4, 6 };
    var ans = DepthFirstTraverse(sample);
    if (correctans.SequenceEqual(ans))
    {
        context.Pass("Depth first traversal correct");
    }
    else if (bfsans.SequenceEqual(ans))
    {
        var data = await File.ReadAllBytesAsync("bfs_vs_dfs.png");
        var image = Image.Load(data);
        context.Fail("Depth first traversal incorrect. You performed breadth first traversal", image);
    }
    else
    {
        context.Fail("Depth first traversal incorrect");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

## [Question]

#!markdown

# Challenge 2: Depth First Traversal

#!markdown

In this challenge, you will be writing an algorithm for traversing the nodes of a binary tree in *depth first* order.

The type you will be working with is the same as the last challenge.

Your will write your answer as a lambda and assign it to `DepthFirstTraverse`. The lambda should have type `Func<BinaryTree, IEnumerable<int>>`.

It should output the list of values for each node in tree. The order should be depth first.

#!csharp

DepthFirstTraverse = root => 
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

DepthFirstTraverse = root => 
{
    var ans = new List<int>();
    if (root is null)
    {
        return ans;
    }
    ans.Add(root.Value);
    ans.AddRange(DepthFirstTraverse(root.Left));
    ans.AddRange(DepthFirstTraverse(root.Right));
    return ans;
};

#!csharp

#!model-answer
// this should fail

DepthFirstTraverse = root => 
{
    var ans = new List<int>();
    if (root is null)
    {
        return ans;
    }
    ans.Add(root.Value);
    ans.AddRange(DepthFirstTraverse(root.Right));
    ans.AddRange(DepthFirstTraverse(root.Left));
    return ans;
};

#!csharp

#!model-answer
// this should fail with hint

DepthFirstTraverse = root => 
{
    var ans = new List<int>();
    var q = new Queue<BinaryTree>();
    q.Enqueue(root);
    while (q.Count > 0)
    {
        var curr = q.Dequeue();
        if (curr is null)
        {
            continue;
        }
        ans.Add(curr.Value);
        q.Enqueue(curr.Left);
        q.Enqueue(curr.Right);
    }
    return ans;
};

#!csharp

Lesson.ResetChallenge();
