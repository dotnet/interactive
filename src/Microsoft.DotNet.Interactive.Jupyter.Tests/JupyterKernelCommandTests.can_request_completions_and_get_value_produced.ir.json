[
  {
    "header": {
      "msg_id": "518711b2-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.319209Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "f88b7816-ff7d-4e3d-beab-e1895461c517",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.0957289Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "5187add4-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.332223Z",
      "msg_type": "kernel_info_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "f88b7816-ff7d-4e3d-beab-e1895461c517",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.0957289Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "protocol_version": "5.0",
      "implementation": "IRkernel",
      "implementation_version": "0.8.15",
      "language_info": {
        "name": "R",
        "version": "3.6.1",
        "mimetype": "text/x-r-source",
        "file_extension": ".r",
        "pygments_lexer": "r",
        "codemirror_mode": "r"
      },
      "banner": "R version 3.6.1 (2019-07-05)",
      "status": "ok",
      "help_links": []
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "5189d0e6-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.334217Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "f88b7816-ff7d-4e3d-beab-e1895461c517",
      "username": "dotnet_kernel",
      "session": "efda3f7f-7ef1-4c98-bac9-9ea21210ea0e",
      "date": "2023-02-13T17:24:49.0957289Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "519d800a-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.466223Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "02fa2c45-49bf-4955-995c-3d4d40e103c2",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.4279299Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "519e9152-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.477219Z",
      "msg_type": "execute_input",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "02fa2c45-49bf-4955-995c-3d4d40e103c2",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.4279299Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "code": "# Copyright (c) .NET Foundation and contributors. All rights reserved.\n# Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\nlibrary(IRkernel);\nlibrary(jsonlite);\n\n.dotnet_coe_comm_hander_env <- new.env();\n\n.dotnet_coe_comm_hander_env$emptyEvent <- fromJSON(\"{}\")\n\n# events\n.dotnet_coe_comm_hander_env$KernelReady <- 'KernelReady';\n.dotnet_coe_comm_hander_env$CommandSucceeded <- 'CommandSucceeded';\n.dotnet_coe_comm_hander_env$CommandFailed <- 'CommandFailed';\n.dotnet_coe_comm_hander_env$ValueProduced <- 'ValueProduced';\n.dotnet_coe_comm_hander_env$ValueInfosProduced <- 'ValueInfosProduced';\n\n#commands\n.dotnet_coe_comm_hander_env$SendValue <- 'SendValue';\n.dotnet_coe_comm_hander_env$RequestValue <- 'RequestValue';\n.dotnet_coe_comm_hander_env$RequestValueInfos <- 'RequestValueInfos';\n\n.dotnet_coe_comm_hander_env$payload <- function(envelope, type) {\n    payload <- list(commandOrEvent = toJSON(envelope, auto_unbox = TRUE, null=\"null\"), type = type);\n    return (payload);\n}\n\n.dotnet_coe_comm_hander_env$eventEnvelope <- function(event, eventType, command = NA) {\n    if (!is.na(command) && !is.null(command)) {\n        # we don't care about routing slip here and there are some json serialization issues with R un-boxing\n        # for now, let's remove it or make it empty\n        command$routingSlip <- list()\n    }\n    envelope <- list(event=event, eventType=eventType, command=command);\n    return (.dotnet_coe_comm_hander_env$payload(envelope, 'event'));\n}\n\n.dotnet_coe_comm_hander_env$is_ready <- function() {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                .dotnet_coe_comm_hander_env$emptyEvent, \n                .dotnet_coe_comm_hander_env$KernelReady)\n    );\n}\n\n.dotnet_coe_comm_hander_env$fail <- function(message = NA, command = NA) {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                list(message=message), \n                .dotnet_coe_comm_hander_env$CommandFailed, \n                command)\n    );\n}\n\n.dotnet_coe_comm_hander_env$pass <- function(command = NA) {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                .dotnet_coe_comm_hander_env$emptyEvent, \n                .dotnet_coe_comm_hander_env$CommandSucceeded, \n                command)\n    );\n}\n\n.dotnet_coe_comm_hander_env$handle_request_value_infos <- function(commandOrEvent) {\n    variables <- ls(all=TRUE, globalenv()) # we only retrieve the global variables \n    results <- list();\n    \n    for (var in variables) {\n        if (!startsWith(var, '.')) {\n            type <- toString(typeof(get(var)));\n            results <- append(results, list(list(name=var, nativeType=type)));\n        };\n    };\n                \n    \n    valueInfosProduced = list(valueInfos=results)\n    \n    response <- .dotnet_coe_comm_hander_env$eventEnvelope(\n                valueInfosProduced, \n                .dotnet_coe_comm_hander_env$ValueInfosProduced, \n                commandOrEvent)\n}\n\n.dotnet_coe_comm_hander_env$handle_request_value <- function(commandOrEvent) {\n    requestValue <- commandOrEvent$command\n    mimeType <- requestValue$mimeType\n    name <- requestValue$name\n    \n    if (is.na(name) || name == '' || !exists(name)) {\n        return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Variable \"%s\" not found.', name))\n        )\n    }\n    \n    rawValue = get(name);\n    mimeType = if (is.data.frame(rawValue)) 'application/table-schema+json' else mimeType;\n\n    valueProduced = list(\n                        name=name, \n                        value=rawValue, \n                        formattedValue=list(\n                            mimeType=mimeType\n                        )\n                    )\n    response <- .dotnet_coe_comm_hander_env$eventEnvelope(\n                valueProduced, \n                .dotnet_coe_comm_hander_env$ValueProduced, \n                commandOrEvent)\n    \n    return (response)\n}\n\n.dotnet_coe_comm_hander_env$handle_send_value <- function(commandOrEvent) {\n    sendValue <- commandOrEvent$command\n    mimeType <- sendValue$formattedValue$mimeType\n    name <- sendValue$name\n    rawValue <- sendValue$formattedValue$value\n    resultValue = NA\n    \n    if (make.names(name) != name) {\n        return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Invalid Identifier: \"%s\"', name))\n        )\n    }\n    \n    if (mimeType == 'application/table-schema+json') {\n        resultValue <- fromJSON(rawValue)\n        resultValue <- data.frame(resultValue$data)\n    } else if (mimeType == 'application/json') {\n        resultValue <- fromJSON(rawValue)\n    }\n    \n    if (!is.null(resultValue)) {\n        assign(name, resultValue, globalenv());\n        return (.dotnet_coe_comm_hander_env$pass())\n    }\n    \n    return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Failed to set value for \"%s\". \"%s\" mimetype not supported.', name, mimeType))\n    )\n}\n\n.dotnet_coe_comm_hander_env$handle_command <- function(commandOrEvent) {\n    commandType <- commandOrEvent$commandType\n\n    result <- .dotnet_coe_comm_hander_env$fail(\n                sprintf('command \"%s\" not supported', commandType)\n            )\n\n    if (commandType == .dotnet_coe_comm_hander_env$SendValue) {\n        result <- .dotnet_coe_comm_hander_env$handle_send_value(commandOrEvent)\n    } else if (commandType == .dotnet_coe_comm_hander_env$RequestValue) {\n        result <- .dotnet_coe_comm_hander_env$handle_request_value(commandOrEvent)\n    } else if (commandType == .dotnet_coe_comm_hander_env$RequestValueInfos) {\n        result <- .dotnet_coe_comm_hander_env$handle_request_value_infos(commandOrEvent)\n    }\n\n    return (result)\n}\n\n.dotnet_coe_comm_hander_env$handle_command_or_event <- function(msg) {\n    response <- tryCatch({\n            msg_type <- msg$type\n            commandOrEvent <- fromJSON(msg$commandOrEvent)\n        \n            if (msg_type == 'command') {\n                return (.dotnet_coe_comm_hander_env$handle_command(commandOrEvent))\n            } \n        },\n        error=function(cond) {\n            return (\n                .dotnet_coe_comm_hander_env$fail(\n                    sprintf('failed to process comm data. %s', cond$message))\n                )\n        })    \n    \n    return(response)\n}\n\n.dotnet_coe_comm_hander_env$coe_handler_connect_to_comm <- function(comm, data) {\n    comm$on_msg(function(msg) {\n        # assign('.debug.onmsg', msg, globalenv());\n        response <- .dotnet_coe_comm_hander_env$handle_command_or_event(msg);\n        comm$send(response);  \n    })\n\n    ready <- .dotnet_coe_comm_hander_env$is_ready()\n    comm$send(ready);  \n    \n};\n\ncomm_manager()$register_target('dotnet_coe_handler_comm', .dotnet_coe_comm_hander_env$coe_handler_connect_to_comm);\n",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "51d531bc-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.833224Z",
      "msg_type": "execute_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "02fa2c45-49bf-4955-995c-3d4d40e103c2",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.4279299Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "payload": [],
      "user_expressions": {},
      "status": "ok",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "51d6239c-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.836226Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "02fa2c45-49bf-4955-995c-3d4d40e103c2",
      "username": "dotnet_kernel",
      "session": "251f7b49-37e9-405a-b1c5-5238af2ed3d1",
      "date": "2023-02-13T17:24:49.4279299Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "51dd6efe-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.890227Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "fe20709d-5fcd-440d-a6ef-75013ee460c3",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.8724887Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "51dfe058-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.899239Z",
      "msg_type": "comm_msg",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "fe20709d-5fcd-440d-a6ef-75013ee460c3",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.8724887Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "comm_id": "da827273-859f-4bc3-8aba-ebd59eabba0c",
      "data": {
        "commandOrEvent": "{\"event\":{},\"eventType\":\"KernelReady\",\"command\":null}",
        "type": "event"
      }
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "51e0552e-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.901230Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "fe20709d-5fcd-440d-a6ef-75013ee460c3",
      "username": "dotnet_kernel",
      "session": "ab0ee694-92e4-40c9-b488-acbc88fd5e63",
      "date": "2023-02-13T17:24:49.8724887Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "5200612a-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.114225Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "dfce8389-5f7d-4901-b91a-297527df9c91",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.0947638Z",
      "msg_type": "complete_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "52065436-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.154225Z",
      "msg_type": "complete_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "dfce8389-5f7d-4901-b91a-297527df9c91",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.0947638Z",
      "msg_type": "complete_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "matches": [
        "prcomp",
        "precip",
        "predict",
        "predict.glm",
        "predict.lm",
        "preplot",
        "presidents",
        "pressure",
        "prettify",
        "pretty",
        "pretty.default",
        "prettyNum",
        "princomp",
        "print",
        "print.AsIs",
        "print.by",
        "print.condition",
        "print.connection",
        "print.data.frame",
        "print.Date",
        "print.default",
        "print.difftime",
        "print.Dlist",
        "print.DLLInfo",
        "print.DLLInfoList",
        "print.DLLRegisteredRoutines",
        "print.eigen",
        "print.factor",
        "print.function",
        "print.hexmode",
        "print.libraryIQR",
        "print.listof",
        "print.NativeRoutineList",
        "print.noquote",
        "print.numeric_version",
        "print.octmode",
        "print.packageInfo",
        "print.POSIXct",
        "print.POSIXlt",
        "print.proc_time",
        "print.restart",
        "print.rle",
        "print.simple.list",
        "print.srcfile",
        "print.srcref",
        "print.summary.table",
        "print.summary.warnings",
        "print.summaryDefault",
        "print.table",
        "print.vignette",
        "print.warnings",
        "printCoefmat",
        "prmatrix",
        "proc.time",
        "process.events",
        "prod",
        "profile",
        "prohibitGeneric",
        "proj",
        "promax",
        "prompt",
        "promptClass",
        "promptData",
        "promptImport",
        "promptMethods",
        "promptPackage",
        "prop.table",
        "prop.test",
        "prop.trend.test",
        "prototype",
        "provideDimnames"
      ],
      "cursor_start": 0,
      "cursor_end": 2,
      "metadata": {},
      "status": "ok"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "5207656a-abc3-11ed-a2dc-dde26ecc9c15",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.159227Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "dfce8389-5f7d-4901-b91a-297527df9c91",
      "username": "dotnet_kernel",
      "session": "4ea3452e-eba9-4251-8c06-79fcdd02998e",
      "date": "2023-02-13T17:24:50.0947638Z",
      "msg_type": "complete_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  }
]