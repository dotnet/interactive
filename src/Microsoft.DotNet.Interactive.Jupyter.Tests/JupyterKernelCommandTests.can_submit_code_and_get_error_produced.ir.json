[
  {
    "header": {
      "msg_id": "3569848e-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.652469Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "d4feb4b8-a98e-4a4a-9c58-f1c8555ebfc9",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.5049241Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35730d92-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.668145Z",
      "msg_type": "kernel_info_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "d4feb4b8-a98e-4a4a-9c58-f1c8555ebfc9",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.5049241Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "protocol_version": "5.0",
      "implementation": "IRkernel",
      "implementation_version": "0.8.15",
      "language_info": {
        "name": "R",
        "version": "3.6.1",
        "mimetype": "text/x-r-source",
        "file_extension": ".r",
        "pygments_lexer": "r",
        "codemirror_mode": "r"
      },
      "banner": "R version 3.6.1 (2019-07-05)",
      "status": "ok",
      "help_links": []
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35730d93-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.668145Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "d4feb4b8-a98e-4a4a-9c58-f1c8555ebfc9",
      "username": "dotnet_kernel",
      "session": "ec7d4232-6cf2-430c-bb85-f2c937c1d114",
      "date": "2023-02-09T05:54:25.5049241Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "357571ea-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.683701Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "14d8b6d0-6423-4d72-bf32-341681633010",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.6755879Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "3577d192-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.683701Z",
      "msg_type": "execute_input",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "14d8b6d0-6423-4d72-bf32-341681633010",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.6755879Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "code": "# Copyright (c) .NET Foundation and contributors. All rights reserved.\n# Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\nlibrary(IRkernel);\nlibrary(jsonlite);\n\n.dotnet_coe_comm_hander_env <- new.env();\n\n.dotnet_coe_comm_hander_env$emptyEvent <- fromJSON(\"{}\")\n\n# events\n.dotnet_coe_comm_hander_env$KernelReady <- 'KernelReady';\n.dotnet_coe_comm_hander_env$CommandSucceeded <- 'CommandSucceeded';\n.dotnet_coe_comm_hander_env$CommandFailed <- 'CommandFailed';\n.dotnet_coe_comm_hander_env$ValueProduced <- 'ValueProduced';\n.dotnet_coe_comm_hander_env$ValueInfosProduced <- 'ValueInfosProduced';\n\n#commands\n.dotnet_coe_comm_hander_env$SendValue <- 'SendValue';\n.dotnet_coe_comm_hander_env$RequestValue <- 'RequestValue';\n.dotnet_coe_comm_hander_env$RequestValueInfos <- 'RequestValueInfos';\n\n.dotnet_coe_comm_hander_env$payload <- function(envelope, type) {\n    payload <- list(commandOrEvent = toJSON(envelope, auto_unbox = TRUE, null=\"null\"), type = type);\n    return (payload);\n}\n\n.dotnet_coe_comm_hander_env$eventEnvelope <- function(event, eventType, command = NA) {\n    if (!is.na(command) && !is.null(command)) {\n        # we don't care about routing slip here and there are some json serialization issues with R un-boxing\n        # for now, let's remove it or make it empty\n        command$routingSlip <- list()\n    }\n    envelope <- list(event=event, eventType=eventType, command=command);\n    return (.dotnet_coe_comm_hander_env$payload(envelope, 'event'));\n}\n\n.dotnet_coe_comm_hander_env$is_ready <- function() {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                .dotnet_coe_comm_hander_env$emptyEvent, \n                .dotnet_coe_comm_hander_env$KernelReady)\n    );\n}\n\n.dotnet_coe_comm_hander_env$fail <- function(message = NA, command = NA) {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                list(message=message), \n                .dotnet_coe_comm_hander_env$CommandFailed, \n                command)\n    );\n}\n\n.dotnet_coe_comm_hander_env$pass <- function(command = NA) {\n    return (\n        .dotnet_coe_comm_hander_env$eventEnvelope(\n                .dotnet_coe_comm_hander_env$emptyEvent, \n                .dotnet_coe_comm_hander_env$CommandSucceeded, \n                command)\n    );\n}\n\n.dotnet_coe_comm_hander_env$handle_request_value_infos <- function(commandOrEvent) {\n    variables <- ls(all=TRUE, globalenv()) # we only retrieve the global variables \n    results <- list();\n    \n    for (var in variables) {\n        if (!startsWith(var, '.')) {\n            type <- toString(typeof(get(var)));\n            results <- append(results, list(list(name=var, nativeType=type)));\n        };\n    };\n                \n    \n    valueInfosProduced = list(valueInfos=results)\n    \n    response <- .dotnet_coe_comm_hander_env$eventEnvelope(\n                valueInfosProduced, \n                .dotnet_coe_comm_hander_env$ValueInfosProduced, \n                commandOrEvent)\n}\n\n.dotnet_coe_comm_hander_env$handle_request_value <- function(commandOrEvent) {\n    requestValue <- commandOrEvent$command\n    mimeType <- requestValue$mimeType\n    name <- requestValue$name\n    \n    if (is.na(name) || name == '' || !exists(name)) {\n        return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Variable \"%s\" not found.', name))\n        )\n    }\n    \n    rawValue = get(name);\n    mimeType = if (is.data.frame(rawValue)) 'application/table-schema+json' else mimeType;\n\n    valueProduced = list(\n                        name=name, \n                        value=rawValue, \n                        formattedValue=list(\n                            mimeType=mimeType\n                        )\n                    )\n    response <- .dotnet_coe_comm_hander_env$eventEnvelope(\n                valueProduced, \n                .dotnet_coe_comm_hander_env$ValueProduced, \n                commandOrEvent)\n    \n    return (response)\n}\n\n.dotnet_coe_comm_hander_env$handle_send_value <- function(commandOrEvent) {\n    sendValue <- commandOrEvent$command\n    mimeType <- sendValue$formattedValue$mimeType\n    name <- sendValue$name\n    rawValue <- sendValue$formattedValue$value\n    resultValue = NA\n    \n    if (make.names(name) != name) {\n        return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Invalid Identifier: \"%s\"', name))\n        )\n    }\n    \n    if (mimeType == 'application/table-schema+json') {\n        resultValue <- fromJSON(rawValue)\n        resultValue <- data.frame(resultValue$data)\n    } else if (mimeType == 'application/json') {\n        resultValue <- fromJSON(rawValue)\n    }\n    \n    if (!is.null(resultValue)) {\n        assign(name, resultValue, globalenv());\n        return (.dotnet_coe_comm_hander_env$pass())\n    }\n    \n    return (\n            .dotnet_coe_comm_hander_env$fail(\n                    sprintf('Failed to set value for \"%s\". \"%s\" mimetype not supported.', name, mimeType))\n    )\n}\n\n.dotnet_coe_comm_hander_env$handle_command <- function(commandOrEvent) {\n    commandType <- commandOrEvent$commandType\n\n    result <- .dotnet_coe_comm_hander_env$fail(\n                sprintf('command \"%s\" not supported', commandType)\n            )\n\n    if (commandType == .dotnet_coe_comm_hander_env$SendValue) {\n        result <- .dotnet_coe_comm_hander_env$handle_send_value(commandOrEvent)\n    } else if (commandType == .dotnet_coe_comm_hander_env$RequestValue) {\n        result <- .dotnet_coe_comm_hander_env$handle_request_value(commandOrEvent)\n    } else if (commandType == .dotnet_coe_comm_hander_env$RequestValueInfos) {\n        result <- .dotnet_coe_comm_hander_env$handle_request_value_infos(commandOrEvent)\n    }\n\n    return (result)\n}\n\n.dotnet_coe_comm_hander_env$handle_command_or_event <- function(msg) {\n    response <- tryCatch({\n            msg_type <- msg$type\n            commandOrEvent <- fromJSON(msg$commandOrEvent)\n        \n            if (msg_type == 'command') {\n                return (.dotnet_coe_comm_hander_env$handle_command(commandOrEvent))\n            } \n        },\n        error=function(cond) {\n            return (\n                .dotnet_coe_comm_hander_env$fail(\n                    sprintf('failed to process comm data. %s', cond$message))\n                )\n        })    \n    \n    return(response)\n}\n\n.dotnet_coe_comm_hander_env$coe_handler_connect_to_comm <- function(comm, data) {\n    comm$on_msg(function(msg) {\n        # assign('.debug.onmsg', msg, globalenv());\n        response <- .dotnet_coe_comm_hander_env$handle_command_or_event(msg);\n        comm$send(response);  \n    })\n\n    ready <- .dotnet_coe_comm_hander_env$is_ready()\n    comm$send(ready);  \n    \n};\n\ncomm_manager()$register_target('dotnet_coe_handler_comm', .dotnet_coe_comm_hander_env$coe_handler_connect_to_comm);\n",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35a7896e-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.996427Z",
      "msg_type": "execute_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "14d8b6d0-6423-4d72-bf32-341681633010",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.6755879Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "payload": [],
      "user_expressions": {},
      "status": "ok",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35a7896f-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.996427Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "14d8b6d0-6423-4d72-bf32-341681633010",
      "username": "dotnet_kernel",
      "session": "3a48423e-ec09-48fd-b43b-1a889801804f",
      "date": "2023-02-09T05:54:25.6755879Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35a9ee34-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.012114Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "7c2620a4-97ee-4cd6-958b-c54860c84f8f",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.0125541Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35ac6826-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.028343Z",
      "msg_type": "comm_msg",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "7c2620a4-97ee-4cd6-958b-c54860c84f8f",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.0125541Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "comm_id": "81dfc8d0-7dac-423f-a66f-3c5bb9e6f32f",
      "data": {
        "commandOrEvent": "{\"event\":{},\"eventType\":\"KernelReady\",\"command\":null}",
        "type": "event"
      }
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "35ac6827-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.028343Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "7c2620a4-97ee-4cd6-958b-c54860c84f8f",
      "username": "dotnet_kernel",
      "session": "0a82924b-7524-4e34-8b0e-0f44ad159683",
      "date": "2023-02-09T05:54:26.0125541Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "364020de-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.996451Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "28eae51e-2ee0-47b9-b851-b183f69defcd",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.9914443Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "3649ad66-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:27.059031Z",
      "msg_type": "execute_input",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "28eae51e-2ee0-47b9-b851-b183f69defcd",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.9914443Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "code": "prin()",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "364e71e8-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:27.090276Z",
      "msg_type": "error",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "28eae51e-2ee0-47b9-b851-b183f69defcd",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.9914443Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "ename": "ERROR",
      "evalue": "Error in prin(): could not find function \"prin\"\n",
      "traceback": [
        "Error in prin(): could not find function \"prin\"\nTraceback:\n"
      ]
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "3650d6cc-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:27.105966Z",
      "msg_type": "execute_reply",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "28eae51e-2ee0-47b9-b851-b183f69defcd",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.9914443Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "payload": [],
      "user_expressions": {},
      "status": "ok",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "3650d6cd-a83e-11ed-af63-63ef116792dc",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:27.121504Z",
      "msg_type": "status",
      "version": "5.0"
    },
    "parent_header": {
      "msg_id": "28eae51e-2ee0-47b9-b851-b183f69defcd",
      "username": "dotnet_kernel",
      "session": "73a49a88-14e4-4e26-86e2-6f41568acd9c",
      "date": "2023-02-09T05:54:26.9914443Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  }
]