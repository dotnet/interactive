[
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_10",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.337277Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "b7c36836-74d9-4d34-9c1b-331d03239e2b",
      "username": "dotnet_kernel",
      "session": "7bb8b71d-1dad-4f29-bcf8-2457a51e38ae",
      "date": "2024-11-20T19:53:04.3254782Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_11",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.338279Z",
      "msg_type": "kernel_info_reply",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "b7c36836-74d9-4d34-9c1b-331d03239e2b",
      "username": "dotnet_kernel",
      "session": "7bb8b71d-1dad-4f29-bcf8-2457a51e38ae",
      "date": "2024-11-20T19:53:04.3254782Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "protocol_version": "5.3",
      "implementation": "ipython",
      "implementation_version": "8.12.0",
      "language_info": {
        "name": "python",
        "version": "3.11.4",
        "mimetype": "text/x-python",
        "file_extension": ".py",
        "pygments_lexer": "ipython3",
        "codemirror_mode": {
          "name": "ipython",
          "version": 3
        },
        "nbconvert_exporter": "python"
      },
      "banner": "Python 3.11.4 | packaged by Anaconda, Inc. | (main, Jul  5 2023, 13:38:37) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help.\n",
      "status": "ok",
      "help_links": [
        {
          "text": "Python Reference",
          "url": "https://docs.python.org/3.11"
        },
        {
          "text": "IPython Reference",
          "url": "https://ipython.org/documentation.html"
        },
        {
          "text": "NumPy Reference",
          "url": "https://docs.scipy.org/doc/numpy/reference/"
        },
        {
          "text": "SciPy Reference",
          "url": "https://docs.scipy.org/doc/scipy/reference/"
        },
        {
          "text": "Matplotlib Reference",
          "url": "https://matplotlib.org/contents.html"
        },
        {
          "text": "SymPy Reference",
          "url": "http://docs.sympy.org/latest/index.html"
        },
        {
          "text": "pandas Reference",
          "url": "https://pandas.pydata.org/pandas-docs/stable/"
        }
      ]
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_12",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.338279Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "b7c36836-74d9-4d34-9c1b-331d03239e2b",
      "username": "dotnet_kernel",
      "session": "7bb8b71d-1dad-4f29-bcf8-2457a51e38ae",
      "date": "2024-11-20T19:53:04.3254782Z",
      "msg_type": "kernel_info_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_13",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.357315Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "237e4b88-f6c0-456e-b009-a45b5ee0421b",
      "username": "dotnet_kernel",
      "session": "0f32bb3a-8ab1-45ea-b28d-3c72a2f78a87",
      "date": "2024-11-20T19:53:04.3533980Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_14",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.357315Z",
      "msg_type": "execute_input",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "237e4b88-f6c0-456e-b009-a45b5ee0421b",
      "username": "dotnet_kernel",
      "session": "0f32bb3a-8ab1-45ea-b28d-3c72a2f78a87",
      "date": "2024-11-20T19:53:04.3533980Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "code": "# Copyright (c) .NET Foundation and contributors. All rights reserved.\n# Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\ntry:\n    get_ipython().__class__.__name__\nexcept NameError:\n    raise Exception(\"This script needs to be run in ipython\")\n    \nimport json\ndef __get_dotnet_coe_comm_handler(): \n\n    class CommandEventCommTarget:\n        __control_comm = None\n        __coe_handler = None\n\n        def handle_control_comm_opened(self, comm, msg):\n            if comm is None:\n                raise RuntimeError('Control comm required to open')\n                \n            self.__control_comm = comm\n            self.__control_comm.on_msg(self.handle_control_comm_msg)\n\n            self.__coe_handler = CommandEventHandler()\n            self.__control_comm.send(self.__coe_handler.is_ready())\n\n        def handle_control_comm_msg(self, msg):\n            # This shouldn't happen unless someone calls this method manually\n            if self.__control_comm is None and not self._is_debug:\n                raise RuntimeError('Control comm has not been properly opened')\n\n            data = msg['content']['data']\n            response = self.__coe_handler.handle_command_or_event(data)\n            self.__control_comm.send(response)\n            \n    \n    class CommandEventHandler:\n        __exclude_types = [\"<class 'module'>\", \"<class 'builtin_function_or_method'>\",\"<class 'function'>\"]\n\n        \n        def handle_command_or_event(self, data):\n            try:\n                msg_type = data['type']\n                commandOrEvent = json.loads(data['commandOrEvent'])\n                # self.__debugLog('handle_command_or_event.last_data_recv', commandOrEvent)\n                \n                if (msg_type == \"command\"):\n                    return self.__handle_command(commandOrEvent)\n                    \n            except Exception as e: \n                self. __debugLog('handle_command_or_event.commandFailed', e)\n                return EventEnvelope(CommandFailed(f'failed to process comm data. {str(e)}')).payload()\n        \n        def __handle_command(self, commandOrEvent):\n            commandType = commandOrEvent['commandType']\n\n            envelop = None\n            if (commandType == SendValue.__name__):\n                envelop = self.__handle_send_value(commandOrEvent)\n            elif (commandType == RequestValue.__name__):\n                envelop = self.__handle_request_value(commandOrEvent)\n            elif (commandType == RequestValueInfos.__name__):\n                envelop = self.__handle_request_value_infos(commandOrEvent)\n            else: \n                envelop = EventEnvelope(CommandFailed(f'command \"{commandType}\" not supported'))\n\n            return envelop.payload()\n\n        def __handle_request_value_infos(self, command):\n            results_who_ls = get_ipython().run_line_magic('who_ls', '')\n            variables = globals()\n            results = []\n            for x in results_who_ls:\n                valueType = str(type(variables[x]))\n                if (x in variables and valueType not in self.__exclude_types):\n                    try:\n                        formattedValue = FormattedValue('text/plain+summary', f'{variables[x]}')\n                        results.append(KernelValueInfo(x, formattedValue, valueType))\n                    except Exception as error: \n                        self. __debugLog('failed creating formattedValue for ' +x+ ' of type ' +valueType, error)\n                        pass\n\n            return EventEnvelope(ValueInfosProduced(results), command)\n            \n        def __handle_request_value(self, command):\n            requestValue = RequestValue(command['command'])\n            name = requestValue.name\n            mimeType = requestValue.mimeType\n            \n            if (name not in globals()):\n                return EventEnvelope(CommandFailed(f'Variable \"{name}\" not found.'))\n            \n            rawValue = globals()[name]\n            updatedValue = None\n\n            try: \n                import pandas as pd; \n                if (isinstance(rawValue, pd.DataFrame)):\n                    mimeType = 'application/table-schema+json'\n                    updatedValue = rawValue.to_dict('records')\n            except Exception as e: \n                self. __debugLog('__handle_request_value.dataframe.error', e)\n                pass\n\n            formattedValue = FormattedValue.fromValue(rawValue, mimeType) \n\n            return EventEnvelope(ValueProduced(name, rawValue if updatedValue is None else updatedValue, formattedValue), command)\n        \n        def __handle_send_value(self, command):\n            sendValue = SendValue(command['command'])\n            mimeType = sendValue.formattedValue['mimeType']\n            name = sendValue.name\n            rawValue = sendValue.formattedValue['value']\n            resultValue = None\n            \n            if (not str.isidentifier(name)):\n                return EventEnvelope(CommandFailed(f'Invalid Identifier: \"{name}\"'))\n        \n            if (mimeType == 'application/json'):\n                import json; resultValue = json.loads(rawValue)\n            elif (mimeType == 'application/table-schema+json'):\n                import json; resultValue = json.loads(rawValue)\n                try:\n                    import pandas as pd; resultValue = pd.DataFrame(data=resultValue['data'])\n                except Exception as e:\n                    self.__debugLog('__handle_send_value.dataframe.error', e)\n                    return EventEnvelope(CommandFailed(f'Cannot create pandas dataframe for: \"{name}\". {str(e)}'))\n                \n            if (resultValue is not None): \n                self.__setVariable(name, resultValue) \n                return EventEnvelope(CommandSucceeded())\n            \n            return EventEnvelope(CommandFailed(f'Failed to set value for \"{name}\". \"{mimeType}\" mimetype not supported.'))\n        \n        def is_ready(self):\n            return EventEnvelope(KernelReady()).payload()\n        \n        @staticmethod\n        def __setVariable(name, value):\n            globals()[name] = value\n        \n        @staticmethod\n        def __debugLog(event, message):\n            globals()[f'__log__coe_handler.{str(event)}'] = message\n    \n    \n    class KernelCommand: \n        pass\n\n    class SendValue(KernelCommand): \n        def __init__(self, entries):\n            self.__dict__.update(**entries)\n\n    class RequestValue(KernelCommand):\n        def __init__(self, entries):\n            self.__dict__.update(**entries)\n\n    class RequestValueInfos(KernelCommand):\n        def __init__(self, entries):\n            self.__dict__.update(**entries)\n            \n    class FormattedValue:\n        def __init__(self, mimeType = 'application/json', value = None):\n            self.mimeType = mimeType\n            self.value = value\n        \n        @staticmethod\n        def fromValue(value, mimeType = 'application/json'):\n            formattedValue = None\n            try: \n                import pandas as pd; \n                if (isinstance(value, pd.DataFrame)):\n                    mimeType = 'application/table-schema+json'\n            except Exception: \n                pass\n\n            if (mimeType == 'application/json'):\n                import json; formattedValue = json.dumps(value)\n            elif (mimeType == 'application/table-schema+json'):\n                formattedValue = value.to_string(index=False, max_rows=5)\n\n            return FormattedValue(mimeType, formattedValue)\n\n    class KernelValueInfo:\n        def __init__(self, name, formattedValue: FormattedValue, typeName = None):\n            self.name = name\n            self.formattedValue = formattedValue\n            self.typeName = typeName\n        \n    class KernelEvent:\n        pass\n\n    class KernelReady(KernelEvent):\n        def __init__(self, kernelInfos = []):\n            self.kernelInfos = kernelInfos\n\n    class CommandSucceeded(KernelEvent):\n        pass\n\n    class CommandFailed(KernelEvent):\n        def __init__(self, message = None):\n            self.message = message\n\n    class ValueProduced(KernelEvent):\n        def __init__(self, name, value, formattedValue: FormattedValue):\n            self.name = name\n            self.value = value \n            self.formattedValue = formattedValue\n    \n    class ValueInfosProduced(KernelEvent):\n        def __init__(self, valueInfos):\n            self.valueInfos = valueInfos\n            \n    class Envelope:\n        def payload(self):\n            return { 'commandOrEvent': self.__to_json_string(self) }\n\n        @staticmethod\n        def __to_json_string(obj):\n            return json.dumps(obj, default=lambda o: o.__dict__)\n\n    class EventEnvelope(Envelope):\n        def __init__(self, event: KernelEvent = None, command = None):\n            self.event = event\n            self.eventType = type(event).__name__\n            self.command = command\n\n        def payload(self):\n            ret = super().payload()\n            ret['type'] = 'event'\n            return ret\n    \n    return CommandEventCommTarget()\n\nif hasattr(get_ipython(), 'kernel'):\n    get_ipython().kernel.comm_manager.register_target('dotnet_coe_handler_comm', __get_dotnet_coe_comm_handler().handle_control_comm_opened)\n",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_15",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.379446Z",
      "msg_type": "execute_reply",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "237e4b88-f6c0-456e-b009-a45b5ee0421b",
      "username": "dotnet_kernel",
      "session": "0f32bb3a-8ab1-45ea-b28d-3c72a2f78a87",
      "date": "2024-11-20T19:53:04.3533980Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {
      "started": "2024-11-20T19:53:04.357315Z",
      "dependencies_met": true,
      "engine": "8c78cb0f-b574-4a42-b3a7-e710bf071b23",
      "status": "ok"
    },
    "content": {
      "payload": [],
      "user_expressions": {},
      "status": "ok",
      "execution_count": 0
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_16",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.380128Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "237e4b88-f6c0-456e-b009-a45b5ee0421b",
      "username": "dotnet_kernel",
      "session": "0f32bb3a-8ab1-45ea-b28d-3c72a2f78a87",
      "date": "2024-11-20T19:53:04.3533980Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_17",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.387133Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "6ec96b9a-fdfb-4725-b28e-5f5496dc8517",
      "username": "dotnet_kernel",
      "session": "3715603d-f29b-457a-9609-2b31edcd699a",
      "date": "2024-11-20T19:53:04.3855661Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_18",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.387133Z",
      "msg_type": "comm_msg",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "6ec96b9a-fdfb-4725-b28e-5f5496dc8517",
      "username": "dotnet_kernel",
      "session": "3715603d-f29b-457a-9609-2b31edcd699a",
      "date": "2024-11-20T19:53:04.3855661Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "comm_id": "2f0f8fe5-46b4-42b3-b517-28f07aae3c48",
      "data": {
        "commandOrEvent": "{\"event\": {\"kernelInfos\": []}, \"eventType\": \"KernelReady\", \"command\": null}",
        "type": "event"
      }
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_19",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.388133Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "6ec96b9a-fdfb-4725-b28e-5f5496dc8517",
      "username": "dotnet_kernel",
      "session": "3715603d-f29b-457a-9609-2b31edcd699a",
      "date": "2024-11-20T19:53:04.3855661Z",
      "msg_type": "comm_open",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_20",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.411134Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "busy"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_21",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.411134Z",
      "msg_type": "execute_input",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "code": "for i in range(2):\n\tprint (i, flush=True)",
      "execution_count": 1
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_22",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.412135Z",
      "msg_type": "stream",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "name": "stdout",
      "text": "0\n"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_23",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.415132Z",
      "msg_type": "stream",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "name": "stdout",
      "text": "1\n"
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_24",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.417131Z",
      "msg_type": "execute_reply",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {
      "started": "2024-11-20T19:53:04.411134Z",
      "dependencies_met": true,
      "engine": "8c78cb0f-b574-4a42-b3a7-e710bf071b23",
      "status": "ok"
    },
    "content": {
      "payload": [],
      "user_expressions": {},
      "status": "ok",
      "execution_count": 0
    },
    "buffers": [],
    "channel": "shell"
  },
  {
    "header": {
      "msg_id": "8dbf9a2c-bd6c436de2b01e5f752ce793_51944_25",
      "username": "username",
      "session": "8dbf9a2c-bd6c436de2b01e5f752ce793",
      "date": "2024-11-20T19:53:04.417634Z",
      "msg_type": "status",
      "version": "5.3"
    },
    "parent_header": {
      "msg_id": "47435f71-8614-4420-a3ab-aed718be3a64",
      "username": "dotnet_kernel",
      "session": "a54814d4-a132-420c-ab0f-b7a7110f2d42",
      "date": "2024-11-20T19:53:04.4104346Z",
      "msg_type": "execute_request",
      "version": "5.3"
    },
    "metadata": {},
    "content": {
      "execution_state": "idle"
    },
    "buffers": [],
    "channel": "shell"
  }
]