// --------------------------------------------------------------------------------------
// (c) Robin Neatherway
// --------------------------------------------------------------------------------------
namespace FsAutoComplete


//[<RequireQualifiedAccess>]
//module Debug =
//  open System
//  open System.Collections.Concurrent
//  let toggleVerboseLogging (verbose: bool) = () // todo: set logging latch

//  let waitForDebugger () =
//    while not (Diagnostics.Debugger.IsAttached) do
//      System.Threading.Thread.Sleep(100)

//  module FSharpCompilerEventLogger =
//    open System.Diagnostics.Tracing


//    /// listener for the the events generated by the `FSharp.Compiler.FSharpCompilerEventSource`
//    type Listener() =
//      inherit EventListener()

//      let mutable source = null

//      let inflightEvents = new ConcurrentDictionary<Guid, DateTimeOffset>()

//      override __.OnEventSourceCreated newSource =
//        if newSource.Name = "FSharpCompiler" then
//          base.EnableEvents(newSource, EventLevel.LogAlways, EventKeywords.All)
//          source <- newSource

//      override __.OnEventWritten eventArgs =
//        ()

//      interface System.IDisposable with
//        member __.Dispose () =
//          if isNull source then () else base.DisableEvents(source)
