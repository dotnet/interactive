#!csharp

#r {journey_dll_path}

using Microsoft.DotNet.Interactive.Journey;
using System;
using System.Threading.Tasks;
using Microsoft.DotNet.Interactive;

Task.Run(() => Microsoft.DotNet.Interactive.Journey.Main.OnLoadAsync(Kernel.Root)).Wait();

#!csharp

using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Events;

#!markdown

# [Challenge] func

#!csharp

Func<double, double, double> CalculateTriangleArea = (double x, double y) => 0.0;

#!csharp

Lesson.CurrentChallenge.AddRule("Challenge func rule", context =>
{
    var a = CalculateTriangleArea(1.5, 2) == 1.5;
    var b = CalculateTriangleArea(100, 250.5) == 12525;

    if (a & b)
    {
        context.Pass("Challenge func rule passed");
    }
    else
    {
        context.Fail("Challenge func rule failed");
    }
});

Lesson.CurrentChallenge.OnCodeSubmittedAsync(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        if (total == numPassed)
        {
            context.SetMessage("Challenge func completed");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge func not done");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge: Function

In this challenge, you will need to create a function which calculates the area of triangles! These are the specs, read them carefully before getting started.

* Takes two inputs of type `Double`
* Returns `Double`
* Method name should be `CalculateTriangleArea`
* Throw ArgumentException if any of the arguments are negative

#!csharp

// type your answer below

#!markdown

## [Scratchpad]

#!csharp

#!model-answer

CalculateTriangleArea = (double x, double y) => 
{
    return x * y;
};

#!csharp

#!model-answer

CalculateTriangleArea = (double x, double y) => 
{
    return 0.5 * x * y;
};

#!markdown

# [Challenge] math

#!csharp

var pi = 3.1415926535;

#!csharp

Lesson.ResetChallenge();
Lesson.CurrentChallenge.AddRule("Challenge math rule", context => 
{
    var correctanswer = Math.Sqrt(pi);
    if (Convert.ToDouble(context.EventsProduced.OfType<ReturnValueProduced>().First().Value).Equals(correctanswer))
    {
        context.Pass("Challenge math passed");
    }
    else
    {
        context.Fail("Challenge math failed");
    }
});

Lesson.CurrentChallenge.OnCodeSubmitted(context => 
{
    context.SetMessage("Challenge math message");    
});

#!markdown

## [ChallengeSetup]

#!csharp

var pi = 3.1415926535;

#!markdown

## [Question]

#!markdown

# Challenge: Math

In this challenge, you will need to utilize the math library to make a calculation. Use the variable `pi` and display its square root.

Hint: Bing is your friend!

#!csharp

// type your answer below

#!markdown

## [Scratchpad]

#!csharp

#!model-answer

Math.Sqrt(pi)

#!csharp

#!model-answer

1
