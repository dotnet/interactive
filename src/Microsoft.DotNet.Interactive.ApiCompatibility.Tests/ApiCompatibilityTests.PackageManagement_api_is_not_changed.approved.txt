Microsoft.DotNet.Interactive
  public static class KernelSupportsNugetExtensions
    public static T UseNugetDirective<T>(Func<T,System.Collections.Generic.IReadOnlyList<ResolvedPackageReference>,System.Threading.Tasks.Task> registerResolvedPackageReferences, System.Boolean useResultsCache = True)
  public class PackageRestoreContext, System.IDisposable
    .ctor(System.Boolean useResultsCache = True)
    public System.Collections.Generic.IEnumerable<PackageReference> RequestedPackageReferences { get;}
    public System.Collections.Generic.IEnumerable<ResolvedPackageReference> ResolvedPackageReferences { get;}
    public System.Collections.Generic.IEnumerable<System.String> RestoreSources { get;}
    public System.Void Dispose()
    public PackageReference GetOrAddPackageReference(System.String packageName, System.String packageVersion = null)
    public ResolvedPackageReference GetResolvedPackageReference(System.String packageName)
    public System.Threading.Tasks.Task<PackageRestoreResult> RestoreAsync()
    public System.Void TryAddRestoreSource(System.String source)
  public class PackageRestoreResult
    .ctor(System.Boolean succeeded, System.Collections.Generic.IEnumerable<PackageReference> requestedPackages, System.Collections.Generic.IReadOnlyList<ResolvedPackageReference> resolvedReferences = null, System.Collections.Generic.IReadOnlyCollection<System.String> errors = null)
    public System.Collections.Generic.IReadOnlyCollection<System.String> Errors { get;}
    public System.Collections.Generic.IReadOnlyList<ResolvedPackageReference> ResolvedReferences { get;}
    public System.Boolean Succeeded { get;}
