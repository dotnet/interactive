Microsoft.DotNet.Interactive.AddNugetRestoreSourcesResult::.ctor(bool succeeded, Microsoft.DotNet.Interactive.PackageReference requestedPackage, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.ResolvedPackageReference> addedReferences = , System.Collections.Generic.IReadOnlyCollection<string> errors = )
Microsoft.DotNet.Interactive.AddNugetResult::.ctor(bool succeeded, Microsoft.DotNet.Interactive.PackageReference requestedPackage, System.Collections.Generic.IReadOnlyCollection<string> errors = )
public  System.Collections.Generic.IReadOnlyCollection Microsoft.DotNet.Interactive.AddNugetResult.Errors { get; }
public  bool Microsoft.DotNet.Interactive.AddNugetResult.Succeeded { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.ISupportNuget.RequestedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.ISupportNuget.ResolvedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.ISupportNuget.RestoreSources { get; }
public  Microsoft.DotNet.Interactive.PackageReference Microsoft.DotNet.Interactive.ISupportNuget.GetOrAddPackageReference( string packageName, string packageVersion =  )
public  void Microsoft.DotNet.Interactive.ISupportNuget.RegisterResolvedPackageReferences( System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.ResolvedPackageReference> packageReferences )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.ISupportNuget.RestoreAsync(  )
public  void Microsoft.DotNet.Interactive.ISupportNuget.TryAddRestoreSource( string source )
public static  T Microsoft.DotNet.Interactive.KernelSupportsNugetExtensions.UseNugetDirective<T>(  )
Microsoft.DotNet.Interactive.PackageRestoreContext::.ctor()
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.PackageRestoreContext.RequestedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.PackageRestoreContext.ResolvedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.PackageRestoreContext.RestoreSources { get; }
public  void Microsoft.DotNet.Interactive.PackageRestoreContext.Dispose(  )
public  Microsoft.DotNet.Interactive.PackageReference Microsoft.DotNet.Interactive.PackageRestoreContext.GetOrAddPackageReference( string packageName, string packageVersion =  )
public  Microsoft.DotNet.Interactive.ResolvedPackageReference Microsoft.DotNet.Interactive.PackageRestoreContext.GetResolvedPackageReference( string packageName )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.PackageRestoreContext.RestoreAsync(  )
public  void Microsoft.DotNet.Interactive.PackageRestoreContext.TryAddRestoreSource( string source )
Microsoft.DotNet.Interactive.PackageRestoreResult::.ctor(bool succeeded, System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.PackageReference> requestedPackages, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.ResolvedPackageReference> resolvedReferences = , System.Collections.Generic.IReadOnlyCollection<string> errors = )
public  System.Collections.Generic.IReadOnlyCollection Microsoft.DotNet.Interactive.PackageRestoreResult.Errors { get; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.PackageRestoreResult.ResolvedReferences { get; }
public  bool Microsoft.DotNet.Interactive.PackageRestoreResult.Succeeded { get; }
