public static  string FsAutoComplete.TipFormatter.extractSignature( FSharp.Compiler.EditorServices.ToolTipText _arg1 )
public static  Microsoft.FSharp.Collections.FSharpList FsAutoComplete.TipFormatter.formatDocumentation( FSharp.Compiler.EditorServices.ToolTipText _arg2, string _arg1_0, System.Tuple<System.String[], System.String[], System.String[], System.String[], System.String[], System.String[]> _arg1_1, string footer, string cn )
public static  Microsoft.FSharp.Collections.FSharpList FsAutoComplete.TipFormatter.formatDocumentationFromXmlSig( string xmlSig, string assembly, string _arg1_0, System.Tuple<System.String[], System.String[], System.String[], System.String[], System.String[], System.String[]> _arg1_1, string footer, string cn )
public static  Microsoft.FSharp.Collections.FSharpList FsAutoComplete.TipFormatter.formatTip( FSharp.Compiler.EditorServices.ToolTipText _arg1 )
public static  string FsAutoComplete.TipFormatter.nl<T>(  )
public static  string FsAutoComplete.TipFormatter.ttToString( FSharp.Compiler.Text.TaggedText[] tt )
Microsoft.DotNet.Interactive.FSharp.FSharpKernel::.ctor()
public  Microsoft.DotNet.Interactive.PackageRestoreContext Microsoft.DotNet.Interactive.FSharp.FSharpKernel.PackageRestoreContext { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.FSharp.FSharpKernel.RequestedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.FSharp.FSharpKernel.ResolvedPackageReferences { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.FSharp.FSharpKernel.RestoreSources { get; }
public  Microsoft.FSharp.Collections.FSharpList Microsoft.DotNet.Interactive.FSharp.FSharpKernel.GetValues(  )
public  System.Type Microsoft.DotNet.Interactive.FSharp.FSharpKernel.getValueType( string name )
public  System.Collections.Generic.IReadOnlyCollection Microsoft.DotNet.Interactive.FSharp.FSharpKernel.handleGetValueValueInfos(  )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.FSharp.FSharpKernel.handleSetValueAsync( string name, object value, System.Type declaredType )
public  bool Microsoft.DotNet.Interactive.FSharp.FSharpKernel.handleTryGetValue<a>( string name, ref a& value )
public static  Microsoft.DotNet.Interactive.FSharp.FSharpKernel Microsoft.DotNet.Interactive.FSharp.FSharpKernelExtensions.UseDefaultFormatting(  )
public static  Microsoft.DotNet.Interactive.FSharp.FSharpKernel Microsoft.DotNet.Interactive.FSharp.FSharpKernelExtensions.UseDefaultNamespaces(  )
public static  Microsoft.DotNet.Interactive.FSharp.FSharpKernel Microsoft.DotNet.Interactive.FSharp.FSharpKernelExtensions.UseKernelHelpers(  )
public static  void Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.DisplayFunctions.CSS( string styles )
public static  Microsoft.DotNet.Interactive.DisplayedValue Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.DisplayFunctions.display( object value )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.DisplayFunctions.HTML( string value )
public static  void Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.DisplayFunctions.Javascript( string content )
Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript::.ctor(Microsoft.FSharp.Core.FSharpOption<System.String[]> additionalArgs, Microsoft.FSharp.Core.FSharpOption<bool> quiet, Microsoft.FSharp.Core.FSharpOption<Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion> langVersion)
public  FSharp.Compiler.Interactive.Shell+FsiEvaluationSession Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript.Fsi { get; }
public  Microsoft.FSharp.Control.IEvent Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript.ValueBound { get; }
public  System.Tuple Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript.Eval( string code, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken )
public  Microsoft.FSharp.Control.FSharpAsync Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript.GetCompletionItems( string text, int line, int column )
public static  Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.Preview { get; }
public static  Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.V47 { get; }
public static  Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.V50 { get; }
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.IsPreview { get; }
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.IsV47 { get; }
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.IsV50 { get; }
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.Tag { get; }
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.CompareTo( Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion obj )
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.CompareTo( object obj )
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.CompareTo( object obj, System.Collections.IComparer comp )
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.Equals( object obj, System.Collections.IEqualityComparer comp )
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.Equals( Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion obj )
public  bool Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.Equals( object obj )
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.GetHashCode( System.Collections.IEqualityComparer comp )
public  int Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.GetHashCode(  )
public  string Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion.ToString(  )
