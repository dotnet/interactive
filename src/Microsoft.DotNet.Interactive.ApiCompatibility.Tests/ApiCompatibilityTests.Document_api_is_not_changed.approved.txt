Microsoft.DotNet.Interactive.Documents
  public static class CodeSubmission
    public static InteractiveDocument Parse(System.String content, KernelInfoCollection kernelInfos = null)
    public static InteractiveDocument Read(System.IO.Stream stream, KernelInfoCollection kernelInfos)
    public static System.String ToCodeSubmissionContent(System.String newline = 
)
    public static System.Void Write(InteractiveDocument document, System.IO.Stream stream, KernelInfoCollection kernelInfos, System.String newline = 
)
  public class DirectiveParseResult
    .ctor()
    public System.String CommandName { get; set;}
    public System.Collections.Generic.IList<System.String> Errors { get;}
    public System.Collections.Generic.IList<InputField> InputFields { get;}
    public System.Collections.Generic.IDictionary<System.String,System.String> Parameters { get;}
  public class DisplayElement : InteractiveDocumentOutputElement, IDataElement
    .ctor(System.Collections.Generic.IDictionary<System.String,System.Object> data)
    public System.Collections.Generic.IDictionary<System.String,System.Object> Data { get;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Metadata { get;}
  public class ErrorElement : InteractiveDocumentOutputElement
    .ctor(System.String errorValue = null, System.String errorName = Error, System.String[] stackTrace = null)
    public System.String ErrorName { get;}
    public System.String ErrorValue { get;}
    public System.String[] StackTrace { get;}
  public class InputField
    .ctor(System.String valueName, System.String typeHint = text, System.String prompt = null)
    public System.String Prompt { get;}
    public System.String TypeHint { get; set;}
    public System.String ValueName { get; set;}
    public System.Boolean Equals(System.Object obj)
    public System.Int32 GetHashCode()
  public class InteractiveDocument, System.Collections.IEnumerable
    public static System.Threading.Tasks.Task<InteractiveDocument> LoadAsync(System.IO.FileInfo file, KernelInfoCollection kernelInfos = null)
    .ctor(System.Collections.Generic.IList<InteractiveDocumentElement> elements = null)
    public System.Collections.Generic.IList<InteractiveDocumentElement> Elements { get;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Metadata { get;}
    public System.Void Add(InteractiveDocumentElement element)
    public System.String GetDefaultKernelName()
    public System.Collections.Generic.IAsyncEnumerable<InteractiveDocument> GetImportsAsync(System.Func<System.String,DirectiveParseResult> parseDirective, System.Boolean recursive = False)
    public System.Collections.Generic.IEnumerable<InputField> GetInputFields(System.Func<System.String,DirectiveParseResult> parseDirectiveLine)
  public class InteractiveDocumentElement
    .ctor()
    .ctor(System.String contents = null, System.String kernelName = null, System.Collections.Generic.IEnumerable<InteractiveDocumentOutputElement> outputs = null)
    public System.String Contents { get; set;}
    public System.Int32 ExecutionOrder { get; set;}
    public System.String Id { get; set;}
    public System.String KernelName { get; set;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Metadata { get; set;}
    public System.Collections.Generic.List<InteractiveDocumentOutputElement> Outputs { get;}
  public abstract class InteractiveDocumentOutputElement
  public class KernelInfo
    .ctor(System.String name, System.String languageName = null, System.Collections.Generic.IReadOnlyCollection<System.String> aliases = null)
    public System.Collections.Generic.IReadOnlyCollection<System.String> Aliases { get;}
    public System.String LanguageName { get;}
    public System.String Name { get;}
    public System.String ToString()
  public class KernelInfoCollection, System.Collections.Generic.ICollection<KernelInfo>, System.Collections.Generic.IEnumerable<KernelInfo>, System.Collections.IEnumerable
    .ctor()
    public System.Int32 Count { get;}
    public System.String DefaultKernelName { get; set;}
    public System.Boolean IsReadOnly { get;}
    public System.Void Add(KernelInfo kernelInfo)
    public System.Void AddRange(System.Collections.Generic.IEnumerable<KernelInfo> collection)
    public System.Void Clear()
    public KernelInfoCollection Clone()
    public System.Boolean Contains(KernelInfo kernelInfo)
    public System.Boolean Contains(System.String nameOrAlias)
    public System.Void CopyTo(KernelInfo[] array, System.Int32 arrayIndex)
    public System.Boolean Remove(KernelInfo item)
  public class ReturnValueElement : InteractiveDocumentOutputElement, IDataElement
    .ctor()
    public System.Collections.Generic.IDictionary<System.String,System.Object> Data { get;}
    public System.Int32 ExecutionOrder { get; set;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Metadata { get;}
  public class TextElement : InteractiveDocumentOutputElement
    .ctor(System.String text, System.String name = stdout)
    public System.String Name { get;}
    public System.String Text { get;}
Microsoft.DotNet.Interactive.Documents.Jupyter
  public class InputCellMetadata
    .ctor(System.String kernelName = null, System.String language = null)
    public System.String KernelName { get;}
    public System.String Language { get;}
  public static class Notebook
    public static Microsoft.DotNet.Interactive.Documents.InteractiveDocument Parse(System.String json, Microsoft.DotNet.Interactive.Documents.KernelInfoCollection kernelInfos = null)
    public static Microsoft.DotNet.Interactive.Documents.InteractiveDocument Read(System.IO.Stream stream, Microsoft.DotNet.Interactive.Documents.KernelInfoCollection kernelInfos)
    public static System.String ToJupyterJson(System.String defaultLanguage = null)
    public static System.Void Write(Microsoft.DotNet.Interactive.Documents.InteractiveDocument document, System.IO.Stream stream, Microsoft.DotNet.Interactive.Documents.KernelInfoCollection kernelInfos)
