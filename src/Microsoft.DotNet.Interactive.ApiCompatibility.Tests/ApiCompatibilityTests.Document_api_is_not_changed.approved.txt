Microsoft.DotNet.Interactive.Documents
  public static class CodeSubmission
    public static System.Text.Encoding Encoding { get;}
    public static InteractiveDocument Parse(System.String content, System.String defaultLanguage, System.Collections.Generic.IReadOnlyCollection<KernelName> kernelNames)
    public static InteractiveDocument Read(System.IO.Stream stream, System.String defaultLanguage, System.Collections.Generic.IReadOnlyCollection<KernelName> kernelNames)
    public static System.Threading.Tasks.Task<InteractiveDocument> ReadAsync(System.IO.Stream stream, System.String defaultLanguage, System.Collections.Generic.IReadOnlyCollection<KernelName> kernelNames)
    public static System.String ToCodeSubmissionContent(System.String newline = 
)
    public static System.Void Write(InteractiveDocument document, System.IO.Stream stream, System.String newline = 
)
    public static System.Void Write(InteractiveDocument document, System.IO.TextWriter writer, System.String newline = 
)
  public class DisplayElement : InteractiveDocumentOutputElement
    .ctor(System.Collections.Generic.IDictionary<System.String,System.Object> data)
    public System.Collections.Generic.IDictionary<System.String,System.Object> Data { get;}
  public class ErrorElement : InteractiveDocumentOutputElement
    .ctor(System.String errorName, System.String errorValue, System.String[] stackTrace = null)
    public System.String ErrorName { get;}
    public System.String ErrorValue { get;}
    public System.String[] StackTrace { get;}
  public class InteractiveDocument
    .ctor(System.Collections.Generic.IList<InteractiveDocumentElement> elements)
    public System.Collections.Generic.IList<InteractiveDocumentElement> Elements { get;}
  public class InteractiveDocumentElement
    .ctor(System.String language, System.String contents, System.Collections.Generic.IList<InteractiveDocumentOutputElement> outputs = null)
    public System.String Contents { get;}
    public System.String Language { get;}
    public System.Collections.Generic.IList<InteractiveDocumentOutputElement> Outputs { get;}
  public abstract class InteractiveDocumentOutputElement
  public static class JsonElementExtensions
    public static System.Nullable<System.Text.Json.JsonElement> GetPropertyFromPath(System.String[] path)
  public class KernelName
    .ctor(System.String kernelName)
    .ctor(System.String name, System.Collections.Generic.IReadOnlyCollection<System.String> aliases)
    public System.Collections.Generic.IReadOnlyCollection<System.String> Aliases { get;}
    public System.String Name { get;}
    public System.String ToString()
  public class TextElement : InteractiveDocumentOutputElement
    .ctor(System.String text, System.String name = stdout)
    public System.String Name { get;}
    public System.String Text { get;}
Microsoft.DotNet.Interactive.Documents.Jupyter
  public class InputCellMetadata
    .ctor(System.String language = null)
    public System.String Language { get;}
  public static class Notebook
    public static System.Text.Encoding Encoding { get;}
    public static Microsoft.DotNet.Interactive.Documents.InteractiveDocument Parse(System.String content, System.Collections.Generic.IReadOnlyCollection<Microsoft.DotNet.Interactive.Documents.KernelName> kernelNames)
    public static Microsoft.DotNet.Interactive.Documents.InteractiveDocument Read(System.IO.Stream stream, System.Collections.Generic.IReadOnlyCollection<Microsoft.DotNet.Interactive.Documents.KernelName> kernelNames)
    public static System.Threading.Tasks.Task<Microsoft.DotNet.Interactive.Documents.InteractiveDocument> ReadAsync(System.IO.Stream stream, System.Collections.Generic.IReadOnlyCollection<Microsoft.DotNet.Interactive.Documents.KernelName> kernelNames)
    public static System.String ToJupyterNotebookContent(System.String newline = 
)
    public static System.Void Write(Microsoft.DotNet.Interactive.Documents.InteractiveDocument document, System.IO.Stream stream, System.String newline = 
)
    public static System.Void Write(Microsoft.DotNet.Interactive.Documents.InteractiveDocument document, System.IO.TextWriter writer, System.String newline = 
)
Microsoft.DotNet.Interactive.Documents.ParserServer
  public enum DocumentSerializationType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Dib=0
    Ipynb=1
  public class NotebookErrorResponse : NotebookParserServerResponse
    .ctor(System.String id, System.String errorMessage)
    public System.String ErrorMessage { get;}
  public abstract class NotebookParseOrSerializeRequest
    public static NotebookParseOrSerializeRequest FromJson(System.String json)
    public System.String DefaultLanguage { get;}
    public System.String Id { get;}
    public DocumentSerializationType SerializationType { get;}
    public RequestType Type { get;}
  public class NotebookParseRequest : NotebookParseOrSerializeRequest
    .ctor(System.String id, DocumentSerializationType serializationType, System.String defaultLanguage, System.Byte[] rawData)
    public System.Byte[] RawData { get;}
    public RequestType Type { get;}
  public class NotebookParseResponse : NotebookParserServerResponse
    .ctor(System.String id, Microsoft.DotNet.Interactive.Documents.InteractiveDocument document)
    public Microsoft.DotNet.Interactive.Documents.InteractiveDocument Document { get;}
  public class NotebookParserServer
    public static NotebookParserServerResponse HandleRequest(NotebookParseOrSerializeRequest request)
    .ctor(System.IO.TextReader input, System.IO.TextWriter output)
    public System.IO.TextReader Input { get;}
    public System.IO.TextWriter Output { get;}
    public System.Threading.Tasks.Task RunAsync()
  public static class NotebookParserServerExtensions
    public static System.String ToJson()
    public static System.String ToJson()
  public abstract class NotebookParserServerResponse
    public static NotebookParserServerResponse FromJson(System.String json)
    public System.String Id { get;}
  public class NotebookSerializeRequest : NotebookParseOrSerializeRequest
    .ctor(System.String id, DocumentSerializationType serializationType, System.String defaultLanguage, System.String newLine, Microsoft.DotNet.Interactive.Documents.InteractiveDocument document)
    public Microsoft.DotNet.Interactive.Documents.InteractiveDocument Document { get;}
    public System.String NewLine { get;}
    public RequestType Type { get;}
  public class NotebookSerializeResponse : NotebookParserServerResponse
    .ctor(System.String id, System.Byte[] rawData)
    public System.Byte[] RawData { get;}
  public enum RequestType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Parse=0
    Serialize=1
