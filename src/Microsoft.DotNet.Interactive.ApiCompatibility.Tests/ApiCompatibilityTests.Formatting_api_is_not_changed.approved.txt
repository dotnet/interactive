public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.GetPreferredFormatterFor( System.Type type )
public static  ITypeFormatter Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.GetPreferredFormatterFor<T>(  )
Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter<T>::.ctor(FormatDelegate<T> format)
public  string Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.MimeType { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.DataDictionaryConverter::.ctor()
public  System.Collections.Generic.IDictionary Microsoft.DotNet.Interactive.Formatting.DataDictionaryConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public static  Microsoft.DotNet.Interactive.Formatting.IDestructurer Microsoft.DotNet.Interactive.Formatting.Destructurer.GetOrCreate( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.Destructurer Microsoft.DotNet.Interactive.Formatting.Destructurer.GetOrCreate(  )
Microsoft.DotNet.Interactive.Formatting.Destructurer<T>::.ctor()
public  System.Collections.Generic.ICollection Microsoft.DotNet.Interactive.Formatting.Destructurer.Keys { get; }
public  System.Collections.Generic.IDictionary Microsoft.DotNet.Interactive.Formatting.Destructurer.Destructure( T instance )
public  object Microsoft.DotNet.Interactive.Formatting.Destructurer.GetValue( T instance, string propertyName )
Microsoft.DotNet.Interactive.Formatting.FormatContext::.ctor()
Microsoft.DotNet.Interactive.Formatting.FormatContext::.ctor(System.IO.TextWriter writer)
public  int Microsoft.DotNet.Interactive.Formatting.FormatContext.Depth { get; }
public  System.IO.TextWriter Microsoft.DotNet.Interactive.Formatting.FormatContext.Writer { get; }
public  void Microsoft.DotNet.Interactive.Formatting.FormatContext.Dispose(  )
Microsoft.DotNet.Interactive.Formatting.FormatDelegate<T>::.ctor(object object, System.IntPtr method)
public  System.IAsyncResult Microsoft.DotNet.Interactive.Formatting.FormatDelegate.BeginInvoke( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context, System.AsyncCallback callback, object object )
public  bool Microsoft.DotNet.Interactive.Formatting.FormatDelegate.EndInvoke( System.IAsyncResult result )
public  bool Microsoft.DotNet.Interactive.Formatting.FormatDelegate.Invoke( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  string Microsoft.DotNet.Interactive.Formatting.Formatter.DefaultMimeType { get; set; }
public static  int Microsoft.DotNet.Interactive.Formatting.Formatter.ListExpansionLimit { get; set; }
public static  string Microsoft.DotNet.Interactive.Formatting.Formatter.NullString { get; set; }
public static  int Microsoft.DotNet.Interactive.Formatting.Formatter.RecursionLimit { get; set; }
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Format( object instance, System.IO.TextWriter writer )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.FormatTo<T>( Microsoft.DotNet.Interactive.Formatting.FormatContext context, string mimeType = text/plain )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.Formatter.GetPreferredFormatterFor( System.Type actualType, string mimeType )
public static  System.Collections.Generic.IReadOnlyCollection Microsoft.DotNet.Interactive.Formatting.Formatter.GetPreferredMimeTypesFor( System.Type type )
public static  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Formatting.Formatter.GetRegisteredFormattersFor( System.Type actualType )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( Microsoft.DotNet.Interactive.Formatting.ITypeFormatter formatter )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( FormatDelegate<T> formatter, string mimeType = text/plain )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( System.Type type, Microsoft.DotNet.Interactive.Formatting.FormatDelegate<object> formatter, string mimeType = text/plain )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( System.Type type, System.Action<object, System.IO.TextWriter> formatter, string mimeType = text/plain )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( Action<T, System.IO.TextWriter> formatter, string mimeType = text/plain )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( Func<T, string> formatter, string mimeType = text/plain )
public static  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Formatting.Formatter.RegisteredFormatters( bool includeDefaults = True )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.ResetToDefault(  )
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.SetPreferredMimeTypesFor( System.Type type, System.String[] preferredMimeTypes )
public static  string Microsoft.DotNet.Interactive.Formatting.Formatter.ToDisplayString( string mimeType = text/plain )
public static  string Microsoft.DotNet.Interactive.Formatting.Formatter.ToDisplayString( Microsoft.DotNet.Interactive.Formatting.ITypeFormatter formatter )
public static  int Microsoft.DotNet.Interactive.Formatting.Formatter.ListExpansionLimit { get; set; }
public static  void Microsoft.DotNet.Interactive.Formatting.Formatter.FormatTo( T obj, Microsoft.DotNet.Interactive.Formatting.FormatContext context, string mimeType = text/plain )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Append<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Append<TTag>( Microsoft.AspNetCore.Html.IHtmlContent[] contents )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.AppendTo<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag toTag )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Containing<TTag>( string text )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Containing<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.HtmlAttributeEncode(  )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.HtmlEncode(  )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Prepend<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.PrependTo<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag toTag )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.SelfClosing<TTag>(  )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlTag Microsoft.DotNet.Interactive.Formatting.Html.Tag(  )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.ToHtmlContent(  )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WithAttributes<TTag>( System.Collections.Generic.IDictionary<string, object> htmlAttributes )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WithAttributes<TTag>( string name, object value )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WrapInner<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag wrappingTag )
Microsoft.DotNet.Interactive.Formatting.HtmlAttributes::.ctor()
Microsoft.DotNet.Interactive.Formatting.HtmlAttributes::.ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> attributes)
public  int Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Count { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.IsReadOnly { get; }
public  object Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Item { get; set; }
public  System.Collections.Generic.ICollection Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Keys { get; }
public  System.Collections.Generic.ICollection Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Values { get; }
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Add( System.Collections.Generic.KeyValuePair<string, object> item )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Add( string key, object value )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.AddCssClass( string value )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Clear(  )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Contains( System.Collections.Generic.KeyValuePair<string, object> item )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.ContainsKey( string key )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.CopyTo( System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]][] array, int arrayIndex )
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.GetDynamicMemberNames(  )
public  System.Collections.Generic.IEnumerator Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.GetEnumerator(  )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.MergeWith( System.Collections.Generic.IDictionary<string, object> htmlAttributes, bool replace = False )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Remove( System.Collections.Generic.KeyValuePair<string, object> item )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Remove( string key )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.RemoveCssClass( string value )
public  string Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.ToString(  )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryGetMember( System.Dynamic.GetMemberBinder binder, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryGetValue( string key, ref System.Object& value )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryInvokeMember( System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TrySetMember( System.Dynamic.SetMemberBinder binder, object value )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Class( string classes )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Class( string classes, bool include )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Disabled( bool value = True )
public static  bool Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.HasClass( string class )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Selected( bool value = True )
public static  int Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.MaxProperties { get; set; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.GetPreferredFormatterFor( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.GetPreferredFormatterFor<T>(  )
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(Action<T, Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(Func<T, string> format)
public  string Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.MimeType { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(string name)
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(string name, string text)
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(string name, System.Action<Microsoft.DotNet.Interactive.Formatting.FormatContext> content)
public  System.Action Microsoft.DotNet.Interactive.Formatting.HtmlTag.Content { get; set; }
public  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlTag.HtmlAttributes { get; set; }
public  bool Microsoft.DotNet.Interactive.Formatting.HtmlTag.IsSelfClosing { get; set; }
public  string Microsoft.DotNet.Interactive.Formatting.HtmlTag.Name { get; set; }
public  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.MergeAttributes( System.Collections.Generic.IDictionary<string, object> htmlAttributes, bool replace = False )
public  string Microsoft.DotNet.Interactive.Formatting.HtmlTag.ToString(  )
protected  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteContentsTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
protected  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteEndTag( System.IO.TextWriter writer )
protected  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteSelfClosingTag( System.IO.TextWriter writer )
protected  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteStartTag( System.IO.TextWriter writer )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder =  )
public  void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  System.Collections.Generic.ICollection Microsoft.DotNet.Interactive.Formatting.IDestructurer.Keys { get; }
public  System.Collections.Generic.IDictionary Microsoft.DotNet.Interactive.Formatting.IDestructurer.Destructure( object instance )
public  System.Collections.Generic.IDictionary Microsoft.DotNet.Interactive.Formatting.IDestructurer.Destructure( T instance )
public  string Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.MimeType { get; }
public  System.Type Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.Type { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.Format( object instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  bool Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.Format( T instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Formatting.ITypeFormatterSource.CreateTypeFormatters(  )
protected  void Microsoft.DotNet.Interactive.Formatting.JsonConverter.EnsureStartObject( System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert )
protected  void Microsoft.DotNet.Interactive.Formatting.JsonConverter.OnWrite( System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options )
public  void Microsoft.DotNet.Interactive.Formatting.JsonConverter.Write( System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.JsonExtensions.ToTabularDataResource(  )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.JsonExtensions.ToTabularDataResource(  )
public static  System.Text.Json.JsonSerializerOptions Microsoft.DotNet.Interactive.Formatting.JsonFormatter.SerializerOptions { get; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.JsonFormatter.GetPreferredFormatterFor( System.Type type )
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor()
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor(Action<T, Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
public  string Microsoft.DotNet.Interactive.Formatting.JsonFormatter.MimeType { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.JsonFormatter.Format( T instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.JsonString::.ctor(string json)
public static  int Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.MaxProperties { get; set; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.GetPreferredFormatterFor( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.GetPreferredFormatterFor<T>(  )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.CreateForAnyEnumerable( bool includeInternals = False )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.CreateForAnyObject( bool includeInternals = False )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.CreateForMembers( Expression`1[] members )
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(Action<T, Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(Func<T, string> format)
public  string Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.MimeType { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  object Microsoft.DotNet.Interactive.Formatting.PocketView.Transform( System.Action<Microsoft.DotNet.Interactive.Formatting.HtmlTag, object> transform )
public static  object Microsoft.DotNet.Interactive.Formatting.PocketView.Transform( System.Action<Microsoft.DotNet.Interactive.Formatting.HtmlTag, object, Microsoft.DotNet.Interactive.Formatting.FormatContext> transform )
Microsoft.DotNet.Interactive.Formatting.PocketView::.ctor(Microsoft.DotNet.Interactive.Formatting.PocketView nested = )
Microsoft.DotNet.Interactive.Formatting.PocketView::.ctor(string tagName, Microsoft.DotNet.Interactive.Formatting.PocketView nested = )
public  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.PocketView.HtmlAttributes { get; }
public  Microsoft.DotNet.Interactive.Formatting.HtmlTag Microsoft.DotNet.Interactive.Formatting.PocketView.HtmlTag { get; }
public  string Microsoft.DotNet.Interactive.Formatting.PocketView.Name { get; }
public  void Microsoft.DotNet.Interactive.Formatting.PocketView.AddDependency( string id, Microsoft.AspNetCore.Html.IHtmlContent content )
public  void Microsoft.DotNet.Interactive.Formatting.PocketView.SetContent( System.Object[] args )
public  string Microsoft.DotNet.Interactive.Formatting.PocketView.ToString(  )
public  bool Microsoft.DotNet.Interactive.Formatting.PocketView.TryGetIndex( System.Dynamic.GetIndexBinder binder, System.Object[] values, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.PocketView.TryGetMember( System.Dynamic.GetMemberBinder binder, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.PocketView.TryInvoke( System.Dynamic.InvokeBinder binder, System.Object[] args, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.PocketView.TryInvokeMember( System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result )
public  bool Microsoft.DotNet.Interactive.Formatting.PocketView.TrySetMember( System.Dynamic.SetMemberBinder binder, object value )
public  void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( System.IO.TextWriter writer )
public  void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder )
public  void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags._ { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.a { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.area { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.aside { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.b { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.body { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.br { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.button { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.caption { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.center { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.circle { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.code { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.colgroup { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dd { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.details { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.div { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dl { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dt { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.em { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.figure { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.font { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.form { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.g { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h1 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h2 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h3 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h4 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h5 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h6 { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.head { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.header { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.hgroup { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.hr { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.html { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.i { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.iframe { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.img { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.input { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.label { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.li { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.line { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.link { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.main { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.menu { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.menuitem { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.meta { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.meter { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.nav { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.ol { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.optgroup { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.option { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.p { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.pre { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.progress { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.q { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.script { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.section { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.select { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.small { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.source { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.span { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.strike { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.strong { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.style { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.sub { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.summary { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.sup { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.svg { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.table { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tbody { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.td { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.text { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.textarea { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tfoot { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.th { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.thead { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.title { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tr { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.u { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.ul { get; }
public static  object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.video { get; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors::.ctor()
public  int Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Count { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Item { get; }
public  void Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Add( Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor descriptor )
public  bool Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Contains( string name )
public  System.Collections.Generic.IEnumerator Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.GetEnumerator(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema.Fields { get; set; }
public  System.Collections.Generic.List Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema.PrimaryKey { get; set; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor::.ctor(string name, Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType? type = 2, string description = , string format = )
public  string Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Description { get; }
public  string Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Format { get; }
public  string Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Name { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Type { get; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public  void Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter.Write( System.Text.Json.Utf8JsonWriter writer, Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType value, System.Text.Json.JsonSerializerOptions options )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource::.ctor(Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema schema, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<string, object>> data)
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Data { get; }
public  string Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Profile { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Schema { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.ToJsonString(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public  void Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter.Write( System.Text.Json.Utf8JsonWriter writer, Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource value, System.Text.Json.JsonSerializerOptions options )
public static  System.Text.Json.JsonSerializerOptions Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.JsonSerializerOptions { get; }
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.ToTableSchemaFieldType(  )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.ToTabularDataResource<T>(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>::.ctor(Action<T, Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
public  string Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.MimeType { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString.Create( System.Collections.Generic.IReadOnlyDictionary<string, System.Type> fields, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<string, object>> data )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString::.ctor(string json)
public  string Microsoft.DotNet.Interactive.Formatting.TypeFormatter.MimeType { get; }
public  System.Type Microsoft.DotNet.Interactive.Formatting.TypeFormatter.Type { get; }
public  bool Microsoft.DotNet.Interactive.Formatting.TypeFormatter.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.TypeFormatterSourceAttribute::.ctor(System.Type formatterSourceType)
public  System.Type Microsoft.DotNet.Interactive.Formatting.TypeFormatterSourceAttribute.FormatterSourceType { get; }
