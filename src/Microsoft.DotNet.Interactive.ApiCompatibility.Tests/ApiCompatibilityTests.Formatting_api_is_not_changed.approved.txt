public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.GetPreferredFormatterFor( System.Type type )
public static  ITypeFormatter<T> Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter.GetPreferredFormatterFor<T>(  )
Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter<T>::.ctor(FormatDelegate<T> format)
public  System.String Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter<T>.MimeType { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.Csv.CsvFormatter<T>.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.DataDictionaryConverter::.ctor()
public  System.Collections.Generic.IDictionary<System.String,System.Object> Microsoft.DotNet.Interactive.Formatting.DataDictionaryConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public static  Microsoft.DotNet.Interactive.Formatting.IDestructurer Microsoft.DotNet.Interactive.Formatting.Destructurer.GetOrCreate( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.Destructurer<T> Microsoft.DotNet.Interactive.Formatting.Destructurer<T>.GetOrCreate(  )
Microsoft.DotNet.Interactive.Formatting.Destructurer<T>::.ctor()
public  System.Collections.Generic.ICollection<System.String> Microsoft.DotNet.Interactive.Formatting.Destructurer<T>.Keys { get; }
public  System.Collections.Generic.IDictionary<System.String,System.Object> Microsoft.DotNet.Interactive.Formatting.Destructurer<T>.Destructure( T instance )
public  System.Object Microsoft.DotNet.Interactive.Formatting.Destructurer<T>.GetValue( T instance, System.String propertyName )
Microsoft.DotNet.Interactive.Formatting.FormatContext::.ctor()
Microsoft.DotNet.Interactive.Formatting.FormatContext::.ctor(System.IO.TextWriter writer)
public  System.Int32 Microsoft.DotNet.Interactive.Formatting.FormatContext.Depth { get; }
public  System.IO.TextWriter Microsoft.DotNet.Interactive.Formatting.FormatContext.Writer { get; }
public  System.Void Microsoft.DotNet.Interactive.Formatting.FormatContext.Dispose(  )
Microsoft.DotNet.Interactive.Formatting.FormatDelegate<T>::.ctor(System.Object object, System.IntPtr method)
public  System.IAsyncResult Microsoft.DotNet.Interactive.Formatting.FormatDelegate<T>.BeginInvoke( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context, System.AsyncCallback callback, System.Object object )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.FormatDelegate<T>.EndInvoke( System.IAsyncResult result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.FormatDelegate<T>.Invoke( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  System.String Microsoft.DotNet.Interactive.Formatting.Formatter.DefaultMimeType { get; set; }
public static  System.Int32 Microsoft.DotNet.Interactive.Formatting.Formatter.ListExpansionLimit { get; set; }
public static  System.String Microsoft.DotNet.Interactive.Formatting.Formatter.NullString { get; set; }
public static  System.Int32 Microsoft.DotNet.Interactive.Formatting.Formatter.RecursionLimit { get; set; }
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Format( System.Object instance, System.IO.TextWriter writer )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.FormatTo<T>( Microsoft.DotNet.Interactive.Formatting.FormatContext context, System.String mimeType = text/plain )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.Formatter.GetPreferredFormatterFor( System.Type actualType, System.String mimeType )
public static  System.Collections.Generic.IReadOnlyCollection<System.String> Microsoft.DotNet.Interactive.Formatting.Formatter.GetPreferredMimeTypesFor( System.Type type )
public static  System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Formatting.ITypeFormatter> Microsoft.DotNet.Interactive.Formatting.Formatter.GetRegisteredFormattersFor( System.Type actualType )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( Microsoft.DotNet.Interactive.Formatting.ITypeFormatter formatter )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( FormatDelegate<T> formatter, System.String mimeType = text/plain )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( System.Type type, Microsoft.DotNet.Interactive.Formatting.FormatDelegate<System.Object> formatter, System.String mimeType = text/plain )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register( System.Type type, System.Action<System.Object,System.IO.TextWriter> formatter, System.String mimeType = text/plain )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( Action<T,System.IO.TextWriter> formatter, System.String mimeType = text/plain )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.Register<T>( Func<T,System.String> formatter, System.String mimeType = text/plain )
public static  System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Formatting.ITypeFormatter> Microsoft.DotNet.Interactive.Formatting.Formatter.RegisteredFormatters( System.Boolean includeDefaults = True )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.ResetToDefault(  )
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter.SetPreferredMimeTypesFor( System.Type type, System.String[] preferredMimeTypes )
public static  System.String Microsoft.DotNet.Interactive.Formatting.Formatter.ToDisplayString( System.String mimeType = text/plain )
public static  System.String Microsoft.DotNet.Interactive.Formatting.Formatter.ToDisplayString( Microsoft.DotNet.Interactive.Formatting.ITypeFormatter formatter )
public static  System.Int32 Microsoft.DotNet.Interactive.Formatting.Formatter<T>.ListExpansionLimit { get; set; }
public static  System.Void Microsoft.DotNet.Interactive.Formatting.Formatter<T>.FormatTo( T obj, Microsoft.DotNet.Interactive.Formatting.FormatContext context, System.String mimeType = text/plain )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Append<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Append<TTag>( Microsoft.AspNetCore.Html.IHtmlContent[] contents )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.AppendTo<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag toTag )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Containing<TTag>( System.String text )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Containing<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.HtmlAttributeEncode(  )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.HtmlEncode(  )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.Prepend<TTag>( Microsoft.AspNetCore.Html.IHtmlContent content )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.PrependTo<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag toTag )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.SelfClosing<TTag>(  )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlTag Microsoft.DotNet.Interactive.Formatting.Html.Tag(  )
public static  Microsoft.AspNetCore.Html.IHtmlContent Microsoft.DotNet.Interactive.Formatting.Html.ToHtmlContent(  )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WithAttributes<TTag>( System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WithAttributes<TTag>( System.String name, System.Object value )
public static  TTag Microsoft.DotNet.Interactive.Formatting.Html.WrapInner<TTag>( Microsoft.DotNet.Interactive.Formatting.HtmlTag wrappingTag )
Microsoft.DotNet.Interactive.Formatting.HtmlAttributes::.ctor()
Microsoft.DotNet.Interactive.Formatting.HtmlAttributes::.ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> attributes)
public  System.Int32 Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Count { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.IsReadOnly { get; }
public  System.Object Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Item { get; set; }
public  System.Collections.Generic.ICollection<System.String> Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Keys { get; }
public  System.Collections.Generic.ICollection<System.Object> Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Values { get; }
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Add( System.Collections.Generic.KeyValuePair<System.String,System.Object> item )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Add( System.String key, System.Object value )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.AddCssClass( System.String value )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Clear(  )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Contains( System.Collections.Generic.KeyValuePair<System.String,System.Object> item )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.ContainsKey( System.String key )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.CopyTo( System.Collections.Generic.KeyValuePair<System.String,System.Object> array, System.Int32 arrayIndex )
public  System.Collections.Generic.IEnumerable<System.String> Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.GetDynamicMemberNames(  )
public  System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>> Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.GetEnumerator(  )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.MergeWith( System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes, System.Boolean replace = False )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Remove( System.Collections.Generic.KeyValuePair<System.String,System.Object> item )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.Remove( System.String key )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.RemoveCssClass( System.String value )
public  System.String Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.ToString(  )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryGetMember( System.Dynamic.GetMemberBinder binder, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryGetValue( System.String key, ref System.Object& value )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TryInvokeMember( System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.TrySetMember( System.Dynamic.SetMemberBinder binder, System.Object value )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlAttributes.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Class( System.String classes )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Class( System.String classes, System.Boolean include )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Disabled( System.Boolean value = True )
public static  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.HasClass( System.String class )
public static  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlAttributesExtensions.Selected( System.Boolean value = True )
public static  System.Int32 Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.MaxProperties { get; set; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.GetPreferredFormatterFor( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.HtmlFormatter.GetPreferredFormatterFor<T>(  )
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(Action<T,Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>::.ctor(Func<T,System.String> format)
public  System.String Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>.MimeType { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlFormatter<T>.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(System.String name)
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(System.String name, System.String text)
Microsoft.DotNet.Interactive.Formatting.HtmlTag::.ctor(System.String name, System.Action<Microsoft.DotNet.Interactive.Formatting.FormatContext> content)
public  System.Action<Microsoft.DotNet.Interactive.Formatting.FormatContext> Microsoft.DotNet.Interactive.Formatting.HtmlTag.Content { get; set; }
public  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.HtmlTag.HtmlAttributes { get; set; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.HtmlTag.IsSelfClosing { get; set; }
public  System.String Microsoft.DotNet.Interactive.Formatting.HtmlTag.Name { get; set; }
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.MergeAttributes( System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes, System.Boolean replace = False )
public  System.String Microsoft.DotNet.Interactive.Formatting.HtmlTag.ToString(  )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteContentsTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteEndTag( System.IO.TextWriter writer )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteSelfClosingTag( System.IO.TextWriter writer )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteStartTag( System.IO.TextWriter writer )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder = null )
public  System.Void Microsoft.DotNet.Interactive.Formatting.HtmlTag.WriteTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  System.Collections.Generic.ICollection<System.String> Microsoft.DotNet.Interactive.Formatting.IDestructurer.Keys { get; }
public  System.Collections.Generic.IDictionary<System.String,System.Object> Microsoft.DotNet.Interactive.Formatting.IDestructurer.Destructure( System.Object instance )
public  System.Collections.Generic.IDictionary<System.String,System.Object> Microsoft.DotNet.Interactive.Formatting.IDestructurer<T>.Destructure( T instance )
public  System.String Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.MimeType { get; }
public  System.Type Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.Type { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.ITypeFormatter.Format( System.Object instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.ITypeFormatter<T>.Format( T instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public  System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Formatting.ITypeFormatter> Microsoft.DotNet.Interactive.Formatting.ITypeFormatterSource.CreateTypeFormatters(  )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.JsonConverter<T>.EnsureStartObject( System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert )
protected  System.Void Microsoft.DotNet.Interactive.Formatting.JsonConverter<T>.OnWrite( System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options )
public  System.Void Microsoft.DotNet.Interactive.Formatting.JsonConverter<T>.Write( System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.JsonExtensions.ToTabularDataResource(  )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.JsonExtensions.ToTabularDataResource(  )
public static  System.Text.Json.JsonSerializerOptions Microsoft.DotNet.Interactive.Formatting.JsonFormatter.SerializerOptions { get; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.JsonFormatter.GetPreferredFormatterFor( System.Type type )
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor()
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>::.ctor(Action<T,Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
public  System.String Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>.MimeType { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.JsonFormatter<T>.Format( T instance, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.JsonString::.ctor(System.String json)
public static  System.Int32 Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.MaxProperties { get; set; }
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.GetPreferredFormatterFor( System.Type type )
public static  Microsoft.DotNet.Interactive.Formatting.ITypeFormatter Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter.GetPreferredFormatterFor<T>(  )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T> Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>.CreateForAnyEnumerable( System.Boolean includeInternals = False )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T> Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>.CreateForAnyObject( System.Boolean includeInternals = False )
public static  Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T> Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>.CreateForMembers( Expression<Func<T,System.Object>> members )
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(Action<T,Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>::.ctor(Func<T,System.String> format)
public  System.String Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>.MimeType { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PlainTextFormatter<T>.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketView.Transform( System.Action<Microsoft.DotNet.Interactive.Formatting.HtmlTag,System.Object> transform )
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketView.Transform( System.Action<Microsoft.DotNet.Interactive.Formatting.HtmlTag,System.Object,Microsoft.DotNet.Interactive.Formatting.FormatContext> transform )
Microsoft.DotNet.Interactive.Formatting.PocketView::.ctor(Microsoft.DotNet.Interactive.Formatting.PocketView nested = null)
Microsoft.DotNet.Interactive.Formatting.PocketView::.ctor(System.String tagName, Microsoft.DotNet.Interactive.Formatting.PocketView nested = null)
public  Microsoft.DotNet.Interactive.Formatting.HtmlAttributes Microsoft.DotNet.Interactive.Formatting.PocketView.HtmlAttributes { get; }
public  Microsoft.DotNet.Interactive.Formatting.HtmlTag Microsoft.DotNet.Interactive.Formatting.PocketView.HtmlTag { get; }
public  System.String Microsoft.DotNet.Interactive.Formatting.PocketView.Name { get; }
public  System.Void Microsoft.DotNet.Interactive.Formatting.PocketView.AddDependency( System.String id, Microsoft.AspNetCore.Html.IHtmlContent content )
public  System.Void Microsoft.DotNet.Interactive.Formatting.PocketView.SetContent( System.Object[] args )
public  System.String Microsoft.DotNet.Interactive.Formatting.PocketView.ToString(  )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PocketView.TryGetIndex( System.Dynamic.GetIndexBinder binder, System.Object[] values, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PocketView.TryGetMember( System.Dynamic.GetMemberBinder binder, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PocketView.TryInvoke( System.Dynamic.InvokeBinder binder, System.Object[] args, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PocketView.TryInvokeMember( System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.PocketView.TrySetMember( System.Dynamic.SetMemberBinder binder, System.Object value )
public  System.Void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( System.IO.TextWriter writer )
public  System.Void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder )
public  System.Void Microsoft.DotNet.Interactive.Formatting.PocketView.WriteTo( Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags._ { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.a { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.area { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.aside { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.b { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.body { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.br { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.button { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.caption { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.center { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.circle { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.code { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.colgroup { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dd { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.details { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.div { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dl { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.dt { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.em { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.figure { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.font { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.form { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.g { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h1 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h2 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h3 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h4 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h5 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.h6 { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.head { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.header { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.hgroup { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.hr { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.html { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.i { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.iframe { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.img { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.input { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.label { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.li { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.line { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.link { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.main { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.menu { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.menuitem { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.meta { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.meter { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.nav { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.ol { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.optgroup { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.option { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.p { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.pre { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.progress { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.q { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.script { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.section { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.select { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.small { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.source { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.span { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.strike { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.strong { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.style { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.sub { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.summary { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.sup { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.svg { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.table { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tbody { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.td { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.text { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.textarea { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tfoot { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.th { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.thead { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.title { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.tr { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.u { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.ul { get; }
public static  System.Object Microsoft.DotNet.Interactive.Formatting.PocketViewTags.video { get; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors::.ctor()
public  System.Int32 Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Count { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Item { get; }
public  System.Void Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Add( Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor descriptor )
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.Contains( System.String name )
public  System.Collections.Generic.IEnumerator<Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor> Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors.GetEnumerator(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableDataFieldDescriptors Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema.Fields { get; set; }
public  System.Collections.Generic.List<System.String> Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema.PrimaryKey { get; set; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor::.ctor(System.String name, Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType? type = 2, System.String description = null, System.String format = null)
public  System.String Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Description { get; }
public  System.String Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Format { get; }
public  System.String Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Name { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldDescriptor.Type { get; }
Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public  System.Void Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldTypeConverter.Write( System.Text.Json.Utf8JsonWriter writer, Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType value, System.Text.Json.JsonSerializerOptions options )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource::.ctor(Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema schema, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> data)
public  System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Data { get; }
public  System.String Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Profile { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchema Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.Schema { get; }
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource.ToJsonString(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter::.ctor()
public  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter.Read( ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options )
public  System.Void Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceConverter.Write( System.Text.Json.Utf8JsonWriter writer, Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource value, System.Text.Json.JsonSerializerOptions options )
public static  System.Text.Json.JsonSerializerOptions Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.JsonSerializerOptions { get; }
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TableSchemaFieldType Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.ToTableSchemaFieldType(  )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter.ToTabularDataResource<T>(  )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>::.ctor(FormatDelegate<T> format)
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>::.ctor(Action<T,Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
public  System.String Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>.MimeType { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceFormatter<T>.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
public static  Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString.Create( System.Collections.Generic.IReadOnlyDictionary<System.String,System.Type> fields, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> data )
Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResourceJsonString::.ctor(System.String json)
public  System.String Microsoft.DotNet.Interactive.Formatting.TypeFormatter<T>.MimeType { get; }
public  System.Type Microsoft.DotNet.Interactive.Formatting.TypeFormatter<T>.Type { get; }
public  System.Boolean Microsoft.DotNet.Interactive.Formatting.TypeFormatter<T>.Format( T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context )
Microsoft.DotNet.Interactive.Formatting.TypeFormatterSourceAttribute::.ctor(System.Type formatterSourceType)
public  System.Type Microsoft.DotNet.Interactive.Formatting.TypeFormatterSourceAttribute.FormatterSourceType { get; }
