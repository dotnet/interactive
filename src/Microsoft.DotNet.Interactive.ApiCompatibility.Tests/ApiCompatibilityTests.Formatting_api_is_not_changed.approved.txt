Microsoft.DotNet.Interactive.Formatting
  public class DataDictionaryConverter : JsonConverter<System.Collections.Generic.IDictionary<System.String,System.Object>>
    .ctor()
    public System.Collections.Generic.IDictionary<System.String,System.Object> Read(ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
  public static class Destructurer
    public static IDestructurer GetOrCreate(System.Type type)
  public class Destructurer<T>, IDestructurer<T>, IDestructurer
    public static Destructurer<T> GetOrCreate()
    .ctor()
    public System.Collections.Generic.ICollection<System.String> Keys { get;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Destructure(T instance)
    public System.Object GetValue(T instance, System.String propertyName)
  public class FormatContext, System.IDisposable
    .ctor()
    .ctor(System.IO.TextWriter writer)
    public System.Int32 Depth { get;}
    public System.IO.TextWriter Writer { get;}
    public System.Void Dispose()
  public delegate FormatDelegate<T> : System.MulticastDelegate, System.ICloneable, System.Runtime.Serialization.ISerializable
    .ctor(System.Object object, System.IntPtr method)
    public System.IAsyncResult BeginInvoke(T value, FormatContext context, System.AsyncCallback callback, System.Object object)
    public System.Boolean EndInvoke(System.IAsyncResult result)
    public System.Boolean Invoke(T value, FormatContext context)
  public static class Formatter
    public static System.String DefaultMimeType { get; set;}
    public static System.Int32 ListExpansionLimit { get; set;}
    public static System.String NullString { get; set;}
    public static System.Int32 RecursionLimit { get; set;}
    public static System.Void Format(System.Object instance, System.IO.TextWriter writer)
    public static System.Void FormatTo<T>(FormatContext context, System.String mimeType = text/plain)
    public static ITypeFormatter GetPreferredFormatterFor(System.Type actualType, System.String mimeType)
    public static System.Collections.Generic.IReadOnlyCollection<System.String> GetPreferredMimeTypesFor(System.Type type)
    public static System.Void Register(ITypeFormatter formatter)
    public static System.Void Register<T>(FormatDelegate<T> formatter, System.String mimeType = text/plain)
    public static System.Void Register(System.Type type, FormatDelegate<System.Object> formatter, System.String mimeType = text/plain)
    public static System.Void Register(System.Type type, System.Action<System.Object,System.IO.TextWriter> formatter, System.String mimeType = text/plain)
    public static System.Void Register<T>(Action<T,System.IO.TextWriter> formatter, System.String mimeType = text/plain)
    public static System.Void Register<T>(Func<T,System.String> formatter, System.String mimeType = text/plain)
    public static System.Collections.Generic.IEnumerable<ITypeFormatter> RegisteredFormatters(System.Boolean includeDefaults = True)
    public static System.Void ResetToDefault()
    public static System.Void SetPreferredMimeTypesFor(System.Type type, System.String[] preferredMimeTypes)
    public static System.String ToDisplayString(System.String mimeType = text/plain)
    public static System.String ToDisplayString(ITypeFormatter formatter)
  public static class Formatter<T>
    public static System.Int32 ListExpansionLimit { get; set;}
    public static System.Void FormatTo(T obj, FormatContext context, System.String mimeType = text/plain)
  public static class Html
    public static TTag Append<TTag>(Microsoft.AspNetCore.Html.IHtmlContent content)
    public static TTag Append<TTag>(Microsoft.AspNetCore.Html.IHtmlContent[] contents)
    public static TTag AppendTo<TTag>(HtmlTag toTag)
    public static TTag Containing<TTag>(System.String text)
    public static TTag Containing<TTag>(Microsoft.AspNetCore.Html.IHtmlContent content)
    public static Microsoft.AspNetCore.Html.IHtmlContent HtmlAttributeEncode()
    public static Microsoft.AspNetCore.Html.IHtmlContent HtmlEncode()
    public static TTag Prepend<TTag>(Microsoft.AspNetCore.Html.IHtmlContent content)
    public static TTag PrependTo<TTag>(HtmlTag toTag)
    public static TTag SelfClosing<TTag>()
    public static HtmlTag Tag()
    public static Microsoft.AspNetCore.Html.IHtmlContent ToHtmlContent()
    public static TTag WithAttributes<TTag>(System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes)
    public static TTag WithAttributes<TTag>(System.String name, System.Object value)
    public static TTag WrapInner<TTag>(HtmlTag wrappingTag)
  public class HtmlAttributes : System.Dynamic.DynamicObject, Microsoft.AspNetCore.Html.IHtmlContent, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IDictionary<System.String,System.Object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.IEnumerable, System.Dynamic.IDynamicMetaObjectProvider
    .ctor()
    .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> attributes)
    public System.Int32 Count { get;}
    public System.Boolean IsReadOnly { get;}
    public System.Object Item { get; set;}
    public System.Collections.Generic.ICollection<System.String> Keys { get;}
    public System.Collections.Generic.ICollection<System.Object> Values { get;}
    public System.Void Add(System.Collections.Generic.KeyValuePair<System.String,System.Object> item)
    public System.Void Add(System.String key, System.Object value)
    public System.Void AddCssClass(System.String value)
    public System.Void Clear()
    public System.Boolean Contains(System.Collections.Generic.KeyValuePair<System.String,System.Object> item)
    public System.Boolean ContainsKey(System.String key)
    public System.Void CopyTo(System.Collections.Generic.KeyValuePair<System.String,System.Object> array, System.Int32 arrayIndex)
    public System.Collections.Generic.IEnumerable<System.String> GetDynamicMemberNames()
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>> GetEnumerator()
    public System.Void MergeWith(System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes, System.Boolean replace = False)
    public System.Boolean Remove(System.Collections.Generic.KeyValuePair<System.String,System.Object> item)
    public System.Boolean Remove(System.String key)
    public System.Void RemoveCssClass(System.String value)
    public System.String ToString()
    public System.Boolean TryGetMember(System.Dynamic.GetMemberBinder binder, ref System.Object& result)
    public System.Boolean TryGetValue(System.String key, ref System.Object& value)
    public System.Boolean TryInvokeMember(System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result)
    public System.Boolean TrySetMember(System.Dynamic.SetMemberBinder binder, System.Object value)
    public System.Void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder)
  public static class HtmlAttributesExtensions
    public static HtmlAttributes Class(System.String classes)
    public static HtmlAttributes Class(System.String classes, System.Boolean include)
    public static HtmlAttributes Disabled(System.Boolean value = True)
    public static System.Boolean HasClass(System.String class)
    public static HtmlAttributes Selected(System.Boolean value = True)
  public static class HtmlFormatter
    public static System.Int32 MaxProperties { get; set;}
    public static ITypeFormatter GetPreferredFormatterFor(System.Type type)
    public static ITypeFormatter GetPreferredFormatterFor<T>()
  public class HtmlFormatter<T> : TypeFormatter<T>, ITypeFormatter<T>, ITypeFormatter
    .ctor(FormatDelegate<T> format)
    .ctor(Action<T,FormatContext> format)
    .ctor(Func<T,System.String> format)
    public System.String MimeType { get;}
    public System.Boolean Format(T value, FormatContext context)
  public class HtmlTag, Microsoft.AspNetCore.Html.IHtmlContent
    .ctor(System.String name)
    .ctor(System.String name, System.String text)
    .ctor(System.String name, System.Action<FormatContext> content)
    public System.Action<FormatContext> Content { get; set;}
    public HtmlAttributes HtmlAttributes { get; set;}
    public System.Boolean IsSelfClosing { get; set;}
    public System.String Name { get; set;}
    public System.Void MergeAttributes(System.Collections.Generic.IDictionary<System.String,System.Object> htmlAttributes, System.Boolean replace = False)
    public System.String ToString()
    protected System.Void WriteContentsTo(FormatContext context)
    protected System.Void WriteEndTag(System.IO.TextWriter writer)
    protected System.Void WriteSelfClosingTag(System.IO.TextWriter writer)
    protected System.Void WriteStartTag(System.IO.TextWriter writer)
    public System.Void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder = null)
    public System.Void WriteTo(FormatContext context)
  public abstract class IDestructurer
    public System.Collections.Generic.ICollection<System.String> Keys { get;}
    public System.Collections.Generic.IDictionary<System.String,System.Object> Destructure(System.Object instance)
  public abstract class IDestructurer<T>
    public System.Collections.Generic.IDictionary<System.String,System.Object> Destructure(T instance)
  public abstract class ITypeFormatter
    public System.String MimeType { get;}
    public System.Type Type { get;}
    public System.Boolean Format(System.Object instance, FormatContext context)
  public abstract class ITypeFormatter<T>, ITypeFormatter
    public System.Boolean Format(T instance, FormatContext context)
  public abstract class ITypeFormatterSource
    public System.Collections.Generic.IEnumerable<ITypeFormatter> CreateTypeFormatters()
  public abstract class JsonConverter<T> : JsonConverter<T>
    protected System.Void EnsureStartObject(System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert)
    protected System.Void OnWrite(System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options)
    public System.Void Write(System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options)
  public static class JsonExtensions
    public static Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource ToTabularDataResource()
    public static Microsoft.DotNet.Interactive.Formatting.TabularData.TabularDataResource ToTabularDataResource()
  public static class JsonFormatter
    public static System.Text.Json.JsonSerializerOptions SerializerOptions { get;}
    public static ITypeFormatter GetPreferredFormatterFor(System.Type type)
  public class JsonFormatter<T> : TypeFormatter<T>, ITypeFormatter<T>, ITypeFormatter
    .ctor()
    .ctor(FormatDelegate<T> format)
    .ctor(Action<T,FormatContext> format)
    public System.String MimeType { get;}
    public System.Boolean Format(T instance, FormatContext context)
  public class JsonString : Microsoft.AspNetCore.Html.HtmlString, Microsoft.AspNetCore.Html.IHtmlContent
    .ctor(System.String json)
  public static class PlainTextFormatter
    public static System.Int32 MaxProperties { get; set;}
    public static ITypeFormatter GetPreferredFormatterFor(System.Type type)
    public static ITypeFormatter GetPreferredFormatterFor<T>()
  public class PlainTextFormatter<T> : TypeFormatter<T>, ITypeFormatter<T>, ITypeFormatter
    public static PlainTextFormatter<T> CreateForAnyEnumerable(System.Boolean includeInternals = False)
    public static PlainTextFormatter<T> CreateForAnyObject(System.Boolean includeInternals = False)
    public static PlainTextFormatter<T> CreateForMembers(Expression<Func<T,System.Object>> members)
    .ctor(FormatDelegate<T> format)
    .ctor(Action<T,FormatContext> format)
    .ctor(Func<T,System.String> format)
    public System.String MimeType { get;}
    public System.Boolean Format(T value, FormatContext context)
  public class PocketView : System.Dynamic.DynamicObject, Microsoft.AspNetCore.Html.IHtmlContent, System.Dynamic.IDynamicMetaObjectProvider
    public static System.Object Transform(System.Action<HtmlTag,System.Object> transform)
    public static System.Object Transform(System.Action<HtmlTag,System.Object,FormatContext> transform)
    .ctor(PocketView nested = null)
    .ctor(System.String tagName, PocketView nested = null)
    public HtmlAttributes HtmlAttributes { get;}
    public HtmlTag HtmlTag { get;}
    public System.String Name { get;}
    public System.Void AddDependency(System.String id, Microsoft.AspNetCore.Html.IHtmlContent content)
    public System.Void SetContent(System.Object[] args)
    public System.String ToString()
    public System.Boolean TryGetIndex(System.Dynamic.GetIndexBinder binder, System.Object[] values, ref System.Object& result)
    public System.Boolean TryGetMember(System.Dynamic.GetMemberBinder binder, ref System.Object& result)
    public System.Boolean TryInvoke(System.Dynamic.InvokeBinder binder, System.Object[] args, ref System.Object& result)
    public System.Boolean TryInvokeMember(System.Dynamic.InvokeMemberBinder binder, System.Object[] args, ref System.Object& result)
    public System.Boolean TrySetMember(System.Dynamic.SetMemberBinder binder, System.Object value)
    public System.Void WriteTo(System.IO.TextWriter writer)
    public System.Void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder)
    public System.Void WriteTo(FormatContext context)
  public static class PocketViewTags
    public static System.Object _ { get;}
    public static System.Object a { get;}
    public static System.Object area { get;}
    public static System.Object aside { get;}
    public static System.Object b { get;}
    public static System.Object body { get;}
    public static System.Object br { get;}
    public static System.Object button { get;}
    public static System.Object caption { get;}
    public static System.Object center { get;}
    public static System.Object circle { get;}
    public static System.Object code { get;}
    public static System.Object colgroup { get;}
    public static System.Object dd { get;}
    public static System.Object details { get;}
    public static System.Object div { get;}
    public static System.Object dl { get;}
    public static System.Object dt { get;}
    public static System.Object em { get;}
    public static System.Object figure { get;}
    public static System.Object font { get;}
    public static System.Object form { get;}
    public static System.Object g { get;}
    public static System.Object h1 { get;}
    public static System.Object h2 { get;}
    public static System.Object h3 { get;}
    public static System.Object h4 { get;}
    public static System.Object h5 { get;}
    public static System.Object h6 { get;}
    public static System.Object head { get;}
    public static System.Object header { get;}
    public static System.Object hgroup { get;}
    public static System.Object hr { get;}
    public static System.Object html { get;}
    public static System.Object i { get;}
    public static System.Object iframe { get;}
    public static System.Object img { get;}
    public static System.Object input { get;}
    public static System.Object label { get;}
    public static System.Object li { get;}
    public static System.Object line { get;}
    public static System.Object link { get;}
    public static System.Object main { get;}
    public static System.Object menu { get;}
    public static System.Object menuitem { get;}
    public static System.Object meta { get;}
    public static System.Object meter { get;}
    public static System.Object nav { get;}
    public static System.Object ol { get;}
    public static System.Object optgroup { get;}
    public static System.Object option { get;}
    public static System.Object p { get;}
    public static System.Object pre { get;}
    public static System.Object progress { get;}
    public static System.Object q { get;}
    public static System.Object script { get;}
    public static System.Object section { get;}
    public static System.Object select { get;}
    public static System.Object small { get;}
    public static System.Object source { get;}
    public static System.Object span { get;}
    public static System.Object strike { get;}
    public static System.Object strong { get;}
    public static System.Object style { get;}
    public static System.Object sub { get;}
    public static System.Object summary { get;}
    public static System.Object sup { get;}
    public static System.Object svg { get;}
    public static System.Object table { get;}
    public static System.Object tbody { get;}
    public static System.Object td { get;}
    public static System.Object text { get;}
    public static System.Object textarea { get;}
    public static System.Object tfoot { get;}
    public static System.Object th { get;}
    public static System.Object thead { get;}
    public static System.Object title { get;}
    public static System.Object tr { get;}
    public static System.Object u { get;}
    public static System.Object ul { get;}
    public static System.Object video { get;}
   class Style : PocketView, Microsoft.AspNetCore.Html.IHtmlContent, System.Collections.IEnumerable, System.Dynamic.IDynamicMetaObjectProvider
    .ctor()
    public System.Void Add(System.String selector, System.ValueTuple<System.String,System.String> properties)
    public System.Collections.IEnumerator GetEnumerator()
    public System.Collections.Generic.IDictionary<System.String,System.Object> LinkAndApplyClass(System.String class)
    public System.Void SetContent(System.Object[] args)
  public abstract class TypeFormatter<T>, ITypeFormatter<T>, ITypeFormatter
    public System.String MimeType { get;}
    public System.Type Type { get;}
    public System.Boolean Format(T value, FormatContext context)
  public class TypeFormatterSourceAttribute : System.Attribute
    .ctor(System.Type formatterSourceType)
    public System.Type FormatterSourceType { get;}
Microsoft.DotNet.Interactive.Formatting.Csv
  public static class CsvFormatter
    public static Microsoft.DotNet.Interactive.Formatting.ITypeFormatter GetPreferredFormatterFor(System.Type type)
    public static ITypeFormatter<T> GetPreferredFormatterFor<T>()
  public class CsvFormatter<T> : TypeFormatter<T>, ITypeFormatter<T>, Microsoft.DotNet.Interactive.Formatting.ITypeFormatter
    .ctor(FormatDelegate<T> format)
    public System.String MimeType { get;}
    public System.Boolean Format(T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context)
Microsoft.DotNet.Interactive.Formatting.TabularData
  public class TableDataFieldDescriptors, System.Collections.Generic.IEnumerable<TableSchemaFieldDescriptor>, System.Collections.Generic.IReadOnlyCollection<TableSchemaFieldDescriptor>, System.Collections.IEnumerable
    .ctor()
    public System.Int32 Count { get;}
    public TableSchemaFieldDescriptor Item { get;}
    public System.Void Add(TableSchemaFieldDescriptor descriptor)
    public System.Boolean Contains(System.String name)
    public System.Collections.Generic.IEnumerator<TableSchemaFieldDescriptor> GetEnumerator()
  public class TableSchema
    .ctor()
    public TableDataFieldDescriptors Fields { get; set;}
    public System.Collections.Generic.List<System.String> PrimaryKey { get; set;}
  public class TableSchemaFieldDescriptor
    .ctor(System.String name, System.Nullable<TableSchemaFieldType> type = 2, System.String description = null, System.String format = null)
    public System.String Description { get;}
    public System.String Format { get;}
    public System.String Name { get;}
    public TableSchemaFieldType Type { get;}
  public enum TableSchemaFieldType : System.Enum, System.IComparable, System.IConvertible, System.IFormattable
    Any=0
    Object=1
    Null=2
    Number=3
    Integer=4
    Boolean=5
    String=6
    Array=7
    DateTime=8
    GeoPoint=9
    GeoJson=10
  public class TableSchemaFieldTypeConverter : Microsoft.DotNet.Interactive.Formatting.JsonConverter<TableSchemaFieldType>
    .ctor()
    public TableSchemaFieldType Read(ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
    public System.Void Write(System.Text.Json.Utf8JsonWriter writer, TableSchemaFieldType value, System.Text.Json.JsonSerializerOptions options)
  public class TabularDataResource
    .ctor(TableSchema schema, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> data)
    public System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> Data { get;}
    public System.String Profile { get;}
    public TableSchema Schema { get;}
    public TabularDataResourceJsonString ToJsonString()
  public class TabularDataResourceConverter : Microsoft.DotNet.Interactive.Formatting.JsonConverter<TabularDataResource>
    .ctor()
    public TabularDataResource Read(ref System.Text.Json.Utf8JsonReader& reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
    public System.Void Write(System.Text.Json.Utf8JsonWriter writer, TabularDataResource value, System.Text.Json.JsonSerializerOptions options)
  public static class TabularDataResourceFormatter
    public static System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get;}
    public static TableSchemaFieldType ToTableSchemaFieldType()
    public static TabularDataResource ToTabularDataResource<T>()
  public class TabularDataResourceFormatter<T> : TypeFormatter<T>, ITypeFormatter<T>, Microsoft.DotNet.Interactive.Formatting.ITypeFormatter
    .ctor(FormatDelegate<T> format)
    .ctor(Action<T,Microsoft.DotNet.Interactive.Formatting.FormatContext> format)
    public System.String MimeType { get;}
    public System.Boolean Format(T value, Microsoft.DotNet.Interactive.Formatting.FormatContext context)
  public class TabularDataResourceJsonString : Microsoft.DotNet.Interactive.Formatting.JsonString, Microsoft.AspNetCore.Html.IHtmlContent
    public static TabularDataResourceJsonString Create(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Type> fields, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<System.String,System.Object>> data)
    .ctor(System.String json)
