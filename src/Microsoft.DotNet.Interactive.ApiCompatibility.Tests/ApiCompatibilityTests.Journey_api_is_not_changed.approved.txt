Microsoft.DotNet.Interactive.Journey.Challenge::.ctor(System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SubmitCode> setup = , System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SendEditableCode> contents = , System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SubmitCode> environmentSetup = , string name = )
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.Challenge.Contents { get; }
public  Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation Microsoft.DotNet.Interactive.Journey.Challenge.CurrentEvaluation { get; }
public  Microsoft.DotNet.Interactive.Journey.ChallengeSubmission Microsoft.DotNet.Interactive.Journey.Challenge.CurrentSubmission { get; }
public  System.Func Microsoft.DotNet.Interactive.Journey.Challenge.DefaultProgressionHandler { get; set; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.Challenge.EnvironmentSetup { get; }
public  bool Microsoft.DotNet.Interactive.Journey.Challenge.IsSetup { get; }
public  Microsoft.DotNet.Interactive.Journey.Lesson Microsoft.DotNet.Interactive.Journey.Challenge.Lesson { get; }
public  string Microsoft.DotNet.Interactive.Journey.Challenge.Name { get; }
public  System.Func Microsoft.DotNet.Interactive.Journey.Challenge.OnCodeSubmittedHandler { get; }
public  bool Microsoft.DotNet.Interactive.Journey.Challenge.Revealed { get; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.Challenge.Setup { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.Challenge.SubmissionHistory { get; }
public  void Microsoft.DotNet.Interactive.Journey.Challenge.AddRule( string name, System.Action<Microsoft.DotNet.Interactive.Journey.RuleContext> action )
public  void Microsoft.DotNet.Interactive.Journey.Challenge.AddRule( System.Action<Microsoft.DotNet.Interactive.Journey.RuleContext> action )
public  void Microsoft.DotNet.Interactive.Journey.Challenge.AddRuleAsync( string name, System.Func<Microsoft.DotNet.Interactive.Journey.RuleContext, System.Threading.Tasks.Task> action )
public  void Microsoft.DotNet.Interactive.Journey.Challenge.AddRuleAsync( System.Func<Microsoft.DotNet.Interactive.Journey.RuleContext, System.Threading.Tasks.Task> action )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.Challenge.Evaluate( string submittedCode = , System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Events.KernelEvent> events =  )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.Challenge.InvokeOnCodeSubmittedHandler(  )
public  void Microsoft.DotNet.Interactive.Journey.Challenge.OnCodeSubmitted( System.Action<Microsoft.DotNet.Interactive.Journey.ChallengeContext> action )
public  void Microsoft.DotNet.Interactive.Journey.Challenge.OnCodeSubmittedAsync( System.Func<Microsoft.DotNet.Interactive.Journey.ChallengeContext, System.Threading.Tasks.Task> action )
Microsoft.DotNet.Interactive.Journey.ChallengeContext::.ctor(Microsoft.DotNet.Interactive.Journey.Challenge challenge)
public  Microsoft.DotNet.Interactive.Journey.Challenge Microsoft.DotNet.Interactive.Journey.ChallengeContext.Challenge { get; }
public  Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation Microsoft.DotNet.Interactive.Journey.ChallengeContext.Evaluation { get; }
public  Microsoft.DotNet.Interactive.Journey.Lesson Microsoft.DotNet.Interactive.Journey.ChallengeContext.Lesson { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.ChallengeContext.RuleEvaluations { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.ChallengeContext.SubmissionHistory { get; }
public  void Microsoft.DotNet.Interactive.Journey.ChallengeContext.SetMessage( string message, object hint =  )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.ChallengeContext.StartChallengeAsync( Microsoft.DotNet.Interactive.Journey.Challenge challenge )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.ChallengeContext.StartChallengeAsync( string name )
public  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.ChallengeContext.StartNextChallengeAsync(  )
Microsoft.DotNet.Interactive.Journey.ChallengeDefinition::.ctor(string name, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SubmitCode> setup, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SendEditableCode> contents, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SubmitCode> environmentSetup)
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.ChallengeDefinition.Contents { get; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.ChallengeDefinition.EnvironmentSetup { get; }
public  string Microsoft.DotNet.Interactive.Journey.ChallengeDefinition.Name { get; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.ChallengeDefinition.Setup { get; }
public  Microsoft.DotNet.Interactive.Journey.Challenge Microsoft.DotNet.Interactive.Journey.ChallengeDefinition.ToChallenge(  )
Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation::.ctor(string label = )
public  object Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation.Hint { get; }
public  string Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation.Message { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation.RuleEvaluations { get; }
public  void Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation.SetMessage( string message, object hint =  )
public  void Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation.SetRuleOutcome( string name, Microsoft.DotNet.Interactive.Journey.Outcome outcome, string reason = , object hint =  )
public static  Microsoft.DotNet.Interactive.Journey.Challenge Microsoft.DotNet.Interactive.Journey.ChallengeExtensions.SetDefaultProgressionHandler( Microsoft.DotNet.Interactive.Journey.Challenge nextChallenge )
public static  void Microsoft.DotNet.Interactive.Journey.ChallengeExtensions.SetDefaultProgressionHandlers(  )
Microsoft.DotNet.Interactive.Journey.ChallengeSubmission::.ctor(string submittedCode, Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation evaluation, System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Events.KernelEvent> events)
public  Microsoft.DotNet.Interactive.Journey.ChallengeEvaluation Microsoft.DotNet.Interactive.Journey.ChallengeSubmission.Evaluation { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.ChallengeSubmission.EventsProduced { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.ChallengeSubmission.RuleEvaluations { get; }
public  string Microsoft.DotNet.Interactive.Journey.ChallengeSubmission.SubmittedCode { get; }
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.KernelExtensions.InitializeChallenge( Microsoft.DotNet.Interactive.Journey.Challenge challengeToInit )
public static  Microsoft.DotNet.Interactive.CompositeKernel Microsoft.DotNet.Interactive.Journey.KernelExtensions.UseModelAnswerValidation(  )
public static  Microsoft.DotNet.Interactive.CompositeKernel Microsoft.DotNet.Interactive.Journey.KernelExtensions.UseProgressiveLearning( System.Net.Http.HttpClient httpClient =  )
public static  Microsoft.DotNet.Interactive.CompositeKernel Microsoft.DotNet.Interactive.Journey.KernelExtensions.UseProgressiveLearningMiddleware(  )
public static  Microsoft.DotNet.Interactive.Journey.Challenge Microsoft.DotNet.Interactive.Journey.Lesson.CurrentChallenge { get; }
public static  Microsoft.DotNet.Interactive.Journey.LessonMode Microsoft.DotNet.Interactive.Journey.Lesson.Mode { get; set; }
public static  string Microsoft.DotNet.Interactive.Journey.Lesson.Name { get; }
public static  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.Lesson.Setup { get; }
public static  void Microsoft.DotNet.Interactive.Journey.Lesson.Clear(  )
public static  void Microsoft.DotNet.Interactive.Journey.Lesson.From( Microsoft.DotNet.Interactive.Journey.LessonDefinition definition )
public static  bool Microsoft.DotNet.Interactive.Journey.Lesson.IsSetupCommand( Microsoft.DotNet.Interactive.Commands.KernelCommand command )
public static  void Microsoft.DotNet.Interactive.Journey.Lesson.ResetChallenge(  )
public static  void Microsoft.DotNet.Interactive.Journey.Lesson.SetChallengeLookup( System.Func<string, Microsoft.DotNet.Interactive.Journey.Challenge> handler )
public static  void Microsoft.DotNet.Interactive.Journey.Lesson.SetChallengeLookup( System.Func<string, System.Threading.Tasks.Task<Microsoft.DotNet.Interactive.Journey.Challenge>> handler )
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.Lesson.StartChallengeAsync( Microsoft.DotNet.Interactive.Journey.Challenge challenge )
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.Lesson.StartChallengeAsync( string name )
Microsoft.DotNet.Interactive.Journey.Lesson::.ctor()
Microsoft.DotNet.Interactive.Journey.LessonDefinition::.ctor(string name, System.Collections.Generic.IReadOnlyList<Microsoft.DotNet.Interactive.Commands.SubmitCode> setup)
public  string Microsoft.DotNet.Interactive.Journey.LessonDefinition.Name { get; }
public  System.Collections.Generic.IReadOnlyList Microsoft.DotNet.Interactive.Journey.LessonDefinition.Setup { get; }
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.Main.OnLoadAsync( Microsoft.DotNet.Interactive.Kernel kernel, System.Net.Http.HttpClient httpClient =  )
public static  System.Collections.Generic.List Microsoft.DotNet.Interactive.Journey.NotebookLessonParser.AllDirectiveNames { get; }
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.NotebookLessonParser.LoadNotebookFromUrl( System.Uri uri, System.Net.Http.HttpClient httpClient = , Microsoft.DotNet.Interactive.CompositeKernel kernel =  )
public static  void Microsoft.DotNet.Interactive.Journey.NotebookLessonParser.Parse( Microsoft.DotNet.Interactive.Documents.InteractiveDocument document, ref Microsoft.DotNet.Interactive.Journey.LessonDefinition& lesson, ref System.Collections.Generic.List`1[[Microsoft.DotNet.Interactive.Journey.ChallengeDefinition, Microsoft.DotNet.Interactive.Journey, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]& challenges )
public static  System.Threading.Tasks.Task Microsoft.DotNet.Interactive.Journey.NotebookLessonParser.ReadFileAsInteractiveDocument( System.IO.FileInfo file, Microsoft.DotNet.Interactive.CompositeKernel kernel =  )
Microsoft.DotNet.Interactive.Journey.NotebookLessonParser::.ctor()
Microsoft.DotNet.Interactive.Journey.Rule::.ctor(System.Func<Microsoft.DotNet.Interactive.Journey.RuleContext, System.Threading.Tasks.Task> ruleConstraints, string name = )
public  string Microsoft.DotNet.Interactive.Journey.Rule.Name { get; }
Microsoft.DotNet.Interactive.Journey.RuleContext::.ctor(Microsoft.DotNet.Interactive.Journey.ChallengeContext challengeContext, string submittedCode = , System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.Events.KernelEvent> events = , string name = )
public  Microsoft.DotNet.Interactive.Journey.Challenge Microsoft.DotNet.Interactive.Journey.RuleContext.Challenge { get; }
public  System.Collections.Generic.IEnumerable Microsoft.DotNet.Interactive.Journey.RuleContext.EventsProduced { get; }
public  string Microsoft.DotNet.Interactive.Journey.RuleContext.Name { get; }
public  bool Microsoft.DotNet.Interactive.Journey.RuleContext.Passed { get; }
public  string Microsoft.DotNet.Interactive.Journey.RuleContext.SubmittedCode { get; }
public  void Microsoft.DotNet.Interactive.Journey.RuleContext.Fail( string reason = , object hint =  )
public  void Microsoft.DotNet.Interactive.Journey.RuleContext.PartialPass( string reason = , object hint =  )
public  void Microsoft.DotNet.Interactive.Journey.RuleContext.Pass( string reason = , object hint =  )
Microsoft.DotNet.Interactive.Journey.RuleEvaluation::.ctor(Microsoft.DotNet.Interactive.Journey.Outcome outcome, string name = , string reason = , object hint = )
public  object Microsoft.DotNet.Interactive.Journey.RuleEvaluation.Hint { get; }
public  string Microsoft.DotNet.Interactive.Journey.RuleEvaluation.Name { get; }
public  Microsoft.DotNet.Interactive.Journey.Outcome Microsoft.DotNet.Interactive.Journey.RuleEvaluation.Outcome { get; }
public  bool Microsoft.DotNet.Interactive.Journey.RuleEvaluation.Passed { get; }
public  string Microsoft.DotNet.Interactive.Journey.RuleEvaluation.Reason { get; }
Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable<T>::.ctor()
Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable<T>::.ctor(IEqualityComparer<T> comparer)
public  int Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.Count { get; }
public  bool Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.IsReadOnly { get; }
public  bool Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.Add( T item )
public  void Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.Clear(  )
public  bool Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.Contains( T item )
public  void Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.CopyTo( T[] array, int arrayIndex )
public  IEnumerator Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.GetEnumerator(  )
public  bool Microsoft.DotNet.Interactive.Journey.Utilities.OrderedTable.Remove( T item )
