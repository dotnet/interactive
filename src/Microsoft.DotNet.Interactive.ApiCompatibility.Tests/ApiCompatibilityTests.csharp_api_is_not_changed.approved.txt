Microsoft.DotNet.Interactive.CSharp
  public class CSharpKernel : Microsoft.DotNet.Interactive.Kernel, Microsoft.DotNet.Interactive.Extensions.IExtensibleKernel, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.ChangeWorkingDirectory>, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestCompletions>, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestDiagnostics>, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestHoverText>, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestSignatureHelp>, Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SubmitCode>, Microsoft.DotNet.Interactive.ISupportNuget, Microsoft.DotNet.Interactive.ValueSharing.ISupportGetValue, Microsoft.DotNet.Interactive.ValueSharing.ISupportSetClrValue, System.IDisposable
    .ctor()
    .ctor(System.String name)
    public Microsoft.DotNet.Interactive.PackageRestoreContext PackageRestoreContext { get;}
    public System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.PackageReference> RequestedPackageReferences { get;}
    public System.Collections.Generic.IEnumerable<Microsoft.DotNet.Interactive.ResolvedPackageReference> ResolvedPackageReferences { get;}
    public System.Collections.Generic.IEnumerable<System.String> RestoreSources { get;}
    public Microsoft.CodeAnalysis.Scripting.ScriptState ScriptState { get;}
    public System.Collections.Generic.IReadOnlyCollection<Microsoft.DotNet.Interactive.ValueSharing.KernelValueInfo> GetValueInfos()
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.RequestHoverText command, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.RequestSignatureHelp command, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.SubmitCode submitCode, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.ChangeWorkingDirectory command, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.RequestCompletions command, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task HandleAsync(Microsoft.DotNet.Interactive.Commands.RequestDiagnostics command, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task<System.Boolean> IsCompleteSubmissionAsync(System.String code)
    public System.Threading.Tasks.Task LoadExtensionsFromDirectoryAsync(System.IO.DirectoryInfo directory, Microsoft.DotNet.Interactive.KernelInvocationContext context)
    public System.Threading.Tasks.Task SetValueAsync(System.String name, System.Object value, System.Type declaredType = null)
    public System.Boolean TryGetValue<T>(System.String name, ref T& value)
  public static class CSharpKernelExtensions
    public static CSharpKernel UseKernelHelpers()
  public static class LanguageServiceExtensions
    public static System.String ToMarkdownString()
