# CI and PR triggers
trigger:
- master
- feature/*
pr:
- master
- feature/*

# Variables
variables:
  - name: _TeamName
    value: DotNetInteractive
  - name: _BuildConfig
    value: Release
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: DotNetSdkVersion
    value: '3.1.200'
  - name: TryDotNetPackagesPath
    value: $(Build.SourcesDirectory)/artifacts/.trydotnet/packages

stages:
- stage: build
  displayName: Build and Test
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: $(_PublishUsingPipelines)
      enableTelemetry: true
      helixRepo: dotnet/interactive
      jobs:
      - job: Windows_NT
        pool:
          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
            vmImage: windows-2019
          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
            name: NetCoreInternal-Pool
            queue: buildpool.windows.10.amd64.vs2019
        variables:
        # Enable signing for internal, non-PR builds
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - group: DotNet-Blob-Feed
          - group: DotNet-Symbol-Server-Pats
          - name: _SignType
            value: Real
          - name: _DotNetPublishToBlobFeed
            value: true
          - name: _BuildArgs
            value: /p:SignType=$(_SignType)
                   /p:DotNetSignType=$(_SignType)
                   /p:MicroBuild_SigningEnabled=true
                   /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
                   /p:TeamName=$(_TeamName)
                   /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                   /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
                   /p:DotNetPublishToBlobFeed=true
                   /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
                   /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
                   /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                   /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                   /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
                   /p:PublishToSymbolServer=true
        # else
        - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
          - name: _SignType
            value: Test
          - name: _BuildArgs
            value: /p:SignType=$(_SignType)
        steps:
        - script: git config --global core.longpaths true
          displayName: Enable `git clean` to handle long paths

        - checkout: self
          clean: true

        - task: UseDotNet@2
          displayName: Add dotnet 3.0
          inputs:
            packageType: sdk
            version: $(DotNetSdkVersion)
            installationPath: $(Agent.ToolsDirectory)\dotnet

        - script: |
            robocopy "eng\resources" "$(Build.SourcesDirectory)\artifacts"
            :: robocopy return codes are terrible; 1 means files were copied
            if "%errorlevel%" == "1" exit /b 0
            exit /b 1
          displayName: Prevent test directory crawling

        - script: eng\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            -sign
            -test
            $(_BuildArgs)
          displayName: Build / Test
          env:
            TRYDOTNET_PACKAGES_PATH: $(TryDotNetPackagesPath)

        # Prevent symbols packages from being saved in the following `packages` artifact because they're incomplete.
        # See `eng/AfterSolutionBuild.targets:StripFilesFromSymbolPackages` for details.
        - script: del /S $(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\*.symbols.nupkg
          displayName: Clean symbol packages

        - task: PublishBuildArtifacts@1
          displayName: Publish packages to artifacts container
          inputs:
            pathToPublish: $(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)
            artifactName: packages
            artifactType: container

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      helixRepo: dotnet/interactive
      jobs:
      - job: Linux
        pool:
          vmImage: ubuntu-16.04
        variables:
        # Enable signing for internal, non-PR builds
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - name: _SignType
            value: Test
          - name: _BuildArgs
            value: /p:SignType=$(_SignType)
              /p:DotNetSignType=$(_SignType)
              /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
              /p:TeamName=$(_TeamName)
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        # else
        - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
          - name: _SignType
            value: Test
          - name: _BuildArgs
            value: /p:SignType=$(_SignType)
        steps:
        - script: git config --global core.longpaths true
          displayName: Enable `git clean` to handle long paths

        - checkout: self
          clean: true

        - task: UseDotNet@2
          displayName: Add dotnet 3.0
          inputs:
            packageType: sdk
            version: $(DotNetSdkVersion)
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - script: |
            mkdir -p "$(Build.SourcesDirectory)/artifacts"
            cp eng/resources/* "$(Build.SourcesDirectory)/artifacts"
          displayName: Prevent test directory crawling

        - script: ./eng/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            --test
          displayName: Build / Test
          env:
            TRYDOTNET_PACKAGES_PATH: $(TryDotNetPackagesPath)

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      helixRepo: dotnet/interactive
      jobs:
      - job: Dockerfile_Main
        pool:
          vmImage: ubuntu-16.04
        steps:
        - checkout: self
          clean: true
        - task: Docker@2
          displayName: Build main Dockerfile
          inputs:
            command: build
            Dockerfile: "$(Build.SourcesDirectory)/Dockerfile"

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      helixRepo: dotnet/interactive
      jobs:
      - job: Dockerfile_Binder_Dependency
        pool:
          vmImage: ubuntu-16.04
        steps:
        - checkout: self
          clean: true
        - task: Docker@2
          displayName: Build Binder dependency Dockerfile
          inputs:
            command: build
            Dockerfile: "$(Build.SourcesDirectory)/Binder Dependencies/Dockerfile"

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      helixRepo: dotnet/interactive
      jobs:
      - job: IntegrationTest
        dependsOn: Windows_NT
        condition: succeeded()
        pool:
          vmImage: ubuntu-16.04
        variables:
        # specify tool version on public CI builds
        - ${{ if eq(variables['System.TeamProject'], 'public') }}:
          - name: ToolVersionArgs
            value: --version 1.0.0-ci
        # else
        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - name: ToolVersionArgs
            value: ''
        steps:
        - checkout: self
          clean: true
        - task: UseDotNet@2
          displayName: Add dotnet 3.0
          inputs:
            packageType: sdk
            version: $(DotNetSdkVersion)
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: DownloadBuildArtifacts@0
          displayName: Download built packages
          inputs:
            artifactName: packages
            downloadPath: $(Build.ArtifactStagingDirectory)
        - script: echo "<configuration><packageSources><clear /></packageSources></configuration>" > "$(Build.ArtifactStagingDirectory)/NuGet.config"
          displayName: Generate empty NuGet.config
        - script: dotnet tool install -g --configfile "$(Build.ArtifactStagingDirectory)/NuGet.config" $(ToolVersionArgs) --add-source "$(Build.ArtifactStagingDirectory)/packages/Shipping" Microsoft.dotnet-interactive
          displayName: Install global tool
        - script: dotnet interactive --version
          displayName: Write version
        - script: dotnet test
            "$(Build.SourcesDirectory)/dotnet-interactive.IntegrationTests/dotnet-interactive.IntegrationTests.csproj"
            --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/TestResults/IntegrationTests.trx"
          displayName: Execute integration tests
          env:
            INTEGRATION_TEST_RUN: true
        - task: PublishTestResults@2
          displayName: Publish Test Results
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '**/*.trx'
            searchFolder: '$(Build.ArtifactStagingDirectory)/TestResults'
          condition: always()

#---------------------------------------------------------------------------------------------------------------------#
#                                                    Post Build                                                       #
#---------------------------------------------------------------------------------------------------------------------#
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng/common/templates/post-build/post-build.yml
    parameters:
      # Symbol validation is not entirely reliable as of yet, so should be turned off until https://github.com/dotnet/arcade/issues/2871 is resolved.
      enableSymbolValidation: false
      # SourceLink improperly looks for generated files.  See https://github.com/dotnet/arcade/issues/3069
      enableSourceLinkValidation: false

#---------------------------------------------------------------------------------------------------------------------#
#                                                  Package upload                                                     #
#---------------------------------------------------------------------------------------------------------------------#
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng/upload/upload-packages.yml
    parameters:
      branchToUpload: refs/heads/master
